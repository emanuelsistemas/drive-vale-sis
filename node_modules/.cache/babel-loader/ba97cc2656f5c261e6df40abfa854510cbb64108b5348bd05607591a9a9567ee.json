{"ast":null,"code":"import { supabase } from './supabase';\n\n/**\n * Serviço para gerenciar categorias e tags de arquivos\n */\n\n// Tipos para tabela de categorias\n\n// Tipos para tabela de relação arquivo-categoria\n\n// CRUD para categorias\nexport const categoryCrud = {\n  // Criar uma nova categoria\n  async create(data) {\n    try {\n      const {\n        data: result,\n        error\n      } = await supabase.from('file_categories').insert([data]).select();\n      if (error) {\n        console.error('Erro ao criar categoria:', error);\n        throw error;\n      }\n      return result === null || result === void 0 ? void 0 : result[0];\n    } catch (error) {\n      console.error('Erro ao criar categoria:', error);\n      throw error;\n    }\n  },\n  // Obter todas as categorias de um usuário\n  async getByUserId(userId) {\n    try {\n      const {\n        data,\n        error\n      } = await supabase.from('file_categories').select('*').eq('user_id', userId).order('name');\n      if (error) {\n        console.error(`Erro ao buscar categorias do usuário ${userId}:`, error);\n        throw error;\n      }\n      return data;\n    } catch (error) {\n      console.error(`Erro ao buscar categorias do usuário ${userId}:`, error);\n      throw error;\n    }\n  },\n  // Obter categorias de uma empresa\n  async getByEmpresaId(empresaId) {\n    try {\n      const {\n        data,\n        error\n      } = await supabase.from('file_categories').select('*').eq('empresa_id', empresaId).order('name');\n      if (error) {\n        console.error(`Erro ao buscar categorias da empresa ${empresaId}:`, error);\n        throw error;\n      }\n      return data;\n    } catch (error) {\n      console.error(`Erro ao buscar categorias da empresa ${empresaId}:`, error);\n      throw error;\n    }\n  },\n  // Obter uma categoria pelo ID\n  async getById(id) {\n    try {\n      const {\n        data,\n        error\n      } = await supabase.from('file_categories').select('*').eq('id', id).single();\n      if (error) {\n        console.error(`Erro ao buscar categoria ${id}:`, error);\n        throw error;\n      }\n      return data;\n    } catch (error) {\n      console.error(`Erro ao buscar categoria ${id}:`, error);\n      throw error;\n    }\n  },\n  // Atualizar uma categoria\n  async update(id, data) {\n    try {\n      const {\n        data: result,\n        error\n      } = await supabase.from('file_categories').update(data).eq('id', id).select();\n      if (error) {\n        console.error(`Erro ao atualizar categoria ${id}:`, error);\n        throw error;\n      }\n      return result === null || result === void 0 ? void 0 : result[0];\n    } catch (error) {\n      console.error(`Erro ao atualizar categoria ${id}:`, error);\n      throw error;\n    }\n  },\n  // Excluir uma categoria\n  async delete(id) {\n    try {\n      const {\n        error\n      } = await supabase.from('file_categories').delete().eq('id', id);\n      if (error) {\n        console.error(`Erro ao excluir categoria ${id}:`, error);\n        throw error;\n      }\n      return true;\n    } catch (error) {\n      console.error(`Erro ao excluir categoria ${id}:`, error);\n      throw error;\n    }\n  }\n};\n\n// CRUD para relações arquivo-categoria\nexport const fileCategoryCrud = {\n  // Adicionar arquivo a uma categoria\n  async addFileToCategory(fileId, categoryId, userId) {\n    try {\n      const {\n        data,\n        error\n      } = await supabase.from('file_category_relations').insert([{\n        file_id: fileId,\n        category_id: categoryId,\n        created_by: userId\n      }]).select();\n      if (error) {\n        console.error(`Erro ao adicionar arquivo ${fileId} à categoria ${categoryId}:`, error);\n        throw error;\n      }\n      return data === null || data === void 0 ? void 0 : data[0];\n    } catch (error) {\n      console.error(`Erro ao adicionar arquivo ${fileId} à categoria ${categoryId}:`, error);\n      throw error;\n    }\n  },\n  // Remover arquivo de uma categoria\n  async removeFileFromCategory(fileId, categoryId) {\n    try {\n      const {\n        error\n      } = await supabase.from('file_category_relations').delete().eq('file_id', fileId).eq('category_id', categoryId);\n      if (error) {\n        console.error(`Erro ao remover arquivo ${fileId} da categoria ${categoryId}:`, error);\n        throw error;\n      }\n      return true;\n    } catch (error) {\n      console.error(`Erro ao remover arquivo ${fileId} da categoria ${categoryId}:`, error);\n      throw error;\n    }\n  },\n  // Obter categorias de um arquivo\n  async getCategoriesByFileId(fileId) {\n    try {\n      const {\n        data,\n        error\n      } = await supabase.from('file_category_relations').select(`\n          category_id,\n          category:category_id(*)\n        `).eq('file_id', fileId);\n      if (error) {\n        console.error(`Erro ao buscar categorias do arquivo ${fileId}:`, error);\n        throw error;\n      }\n      return data.map(item => item.category);\n    } catch (error) {\n      console.error(`Erro ao buscar categorias do arquivo ${fileId}:`, error);\n      throw error;\n    }\n  },\n  // Obter arquivos de uma categoria\n  async getFilesByCategoryId(categoryId) {\n    try {\n      const {\n        data,\n        error\n      } = await supabase.from('file_category_relations').select(`\n          file_id,\n          file:file_id(*)\n        `).eq('category_id', categoryId);\n      if (error) {\n        console.error(`Erro ao buscar arquivos da categoria ${categoryId}:`, error);\n        throw error;\n      }\n      return data.map(item => item.file);\n    } catch (error) {\n      console.error(`Erro ao buscar arquivos da categoria ${categoryId}:`, error);\n      throw error;\n    }\n  }\n};\n\n// Função para criar tabelas de categorias no Supabase\nexport const createCategoryTables = async () => {\n  try {\n    // Verificar se a tabela de categorias existe\n    const {\n      error: checkCategoriesError\n    } = await supabase.rpc('exec', {\n      query: `SELECT to_regclass('public.file_categories');`\n    });\n    if (checkCategoriesError) {\n      console.log('Criando tabela de categorias...');\n\n      // Criar a tabela file_categories\n      const createCategoriesQuery = `\n        CREATE TABLE IF NOT EXISTS file_categories (\n          id BIGINT GENERATED ALWAYS AS IDENTITY PRIMARY KEY,\n          name TEXT NOT NULL,\n          description TEXT,\n          color TEXT,\n          icon TEXT,\n          empresa_id BIGINT REFERENCES dv_cad_empresas_drive(id),\n          user_id TEXT NOT NULL,\n          parent_id BIGINT REFERENCES file_categories(id),\n          created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()\n        );\n        \n        CREATE INDEX IF NOT EXISTS idx_file_categories_user_id ON file_categories(user_id);\n        CREATE INDEX IF NOT EXISTS idx_file_categories_empresa_id ON file_categories(empresa_id);\n      `;\n      const {\n        error: createCategoriesError\n      } = await supabase.rpc('exec', {\n        query: createCategoriesQuery\n      });\n      if (createCategoriesError) {\n        console.error('Erro ao criar tabela de categorias:', createCategoriesError);\n        throw createCategoriesError;\n      }\n    }\n\n    // Verificar se a tabela de relações arquivo-categoria existe\n    const {\n      error: checkRelationsError\n    } = await supabase.rpc('exec', {\n      query: `SELECT to_regclass('public.file_category_relations');`\n    });\n    if (checkRelationsError) {\n      console.log('Criando tabela de relações arquivo-categoria...');\n\n      // Criar a tabela file_category_relations\n      const createRelationsQuery = `\n        CREATE TABLE IF NOT EXISTS file_category_relations (\n          id BIGINT GENERATED ALWAYS AS IDENTITY PRIMARY KEY,\n          file_id BIGINT REFERENCES files(id) ON DELETE CASCADE,\n          category_id BIGINT REFERENCES file_categories(id) ON DELETE CASCADE,\n          created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),\n          created_by TEXT NOT NULL,\n          UNIQUE(file_id, category_id)\n        );\n        \n        CREATE INDEX IF NOT EXISTS idx_file_category_relations_file_id ON file_category_relations(file_id);\n        CREATE INDEX IF NOT EXISTS idx_file_category_relations_category_id ON file_category_relations(category_id);\n      `;\n      const {\n        error: createRelationsError\n      } = await supabase.rpc('exec', {\n        query: createRelationsQuery\n      });\n      if (createRelationsError) {\n        console.error('Erro ao criar tabela de relações arquivo-categoria:', createRelationsError);\n        throw createRelationsError;\n      }\n    }\n    return {\n      success: true\n    };\n  } catch (error) {\n    console.error('Erro ao criar tabelas de categorias:', error);\n    return {\n      success: false,\n      error\n    };\n  }\n};","map":{"version":3,"names":["supabase","categoryCrud","create","data","result","error","from","insert","select","console","getByUserId","userId","eq","order","getByEmpresaId","empresaId","getById","id","single","update","delete","fileCategoryCrud","addFileToCategory","fileId","categoryId","file_id","category_id","created_by","removeFileFromCategory","getCategoriesByFileId","map","item","category","getFilesByCategoryId","file","createCategoryTables","checkCategoriesError","rpc","query","log","createCategoriesQuery","createCategoriesError","checkRelationsError","createRelationsQuery","createRelationsError","success"],"sources":["/root/m-software/drive-react/src/services/categoryService.ts"],"sourcesContent":["import { supabase } from './supabase';\n\n/**\n * Serviço para gerenciar categorias e tags de arquivos\n */\n\n// Tipos para tabela de categorias\nexport interface FileCategory {\n  id?: number;\n  name: string;\n  description?: string;\n  color?: string;\n  icon?: string;\n  empresa_id?: number;\n  user_id: string;\n  parent_id?: number;\n  created_at?: string;\n}\n\n// Tipos para tabela de relação arquivo-categoria\nexport interface FileCategoryRelation {\n  id?: number;\n  file_id: number;\n  category_id: number;\n  created_at?: string;\n  created_by: string;\n}\n\n// CRUD para categorias\nexport const categoryCrud = {\n  // Criar uma nova categoria\n  async create(data: FileCategory) {\n    try {\n      const { data: result, error } = await supabase\n        .from('file_categories')\n        .insert([data])\n        .select();\n      \n      if (error) {\n        console.error('Erro ao criar categoria:', error);\n        throw error;\n      }\n      \n      return result?.[0];\n    } catch (error) {\n      console.error('Erro ao criar categoria:', error);\n      throw error;\n    }\n  },\n  \n  // Obter todas as categorias de um usuário\n  async getByUserId(userId: string) {\n    try {\n      const { data, error } = await supabase\n        .from('file_categories')\n        .select('*')\n        .eq('user_id', userId)\n        .order('name');\n      \n      if (error) {\n        console.error(`Erro ao buscar categorias do usuário ${userId}:`, error);\n        throw error;\n      }\n      \n      return data;\n    } catch (error) {\n      console.error(`Erro ao buscar categorias do usuário ${userId}:`, error);\n      throw error;\n    }\n  },\n  \n  // Obter categorias de uma empresa\n  async getByEmpresaId(empresaId: number) {\n    try {\n      const { data, error } = await supabase\n        .from('file_categories')\n        .select('*')\n        .eq('empresa_id', empresaId)\n        .order('name');\n      \n      if (error) {\n        console.error(`Erro ao buscar categorias da empresa ${empresaId}:`, error);\n        throw error;\n      }\n      \n      return data;\n    } catch (error) {\n      console.error(`Erro ao buscar categorias da empresa ${empresaId}:`, error);\n      throw error;\n    }\n  },\n  \n  // Obter uma categoria pelo ID\n  async getById(id: number) {\n    try {\n      const { data, error } = await supabase\n        .from('file_categories')\n        .select('*')\n        .eq('id', id)\n        .single();\n      \n      if (error) {\n        console.error(`Erro ao buscar categoria ${id}:`, error);\n        throw error;\n      }\n      \n      return data;\n    } catch (error) {\n      console.error(`Erro ao buscar categoria ${id}:`, error);\n      throw error;\n    }\n  },\n  \n  // Atualizar uma categoria\n  async update(id: number, data: Partial<FileCategory>) {\n    try {\n      const { data: result, error } = await supabase\n        .from('file_categories')\n        .update(data)\n        .eq('id', id)\n        .select();\n      \n      if (error) {\n        console.error(`Erro ao atualizar categoria ${id}:`, error);\n        throw error;\n      }\n      \n      return result?.[0];\n    } catch (error) {\n      console.error(`Erro ao atualizar categoria ${id}:`, error);\n      throw error;\n    }\n  },\n  \n  // Excluir uma categoria\n  async delete(id: number) {\n    try {\n      const { error } = await supabase\n        .from('file_categories')\n        .delete()\n        .eq('id', id);\n      \n      if (error) {\n        console.error(`Erro ao excluir categoria ${id}:`, error);\n        throw error;\n      }\n      \n      return true;\n    } catch (error) {\n      console.error(`Erro ao excluir categoria ${id}:`, error);\n      throw error;\n    }\n  }\n};\n\n// CRUD para relações arquivo-categoria\nexport const fileCategoryCrud = {\n  // Adicionar arquivo a uma categoria\n  async addFileToCategory(fileId: number, categoryId: number, userId: string) {\n    try {\n      const { data, error } = await supabase\n        .from('file_category_relations')\n        .insert([{\n          file_id: fileId,\n          category_id: categoryId,\n          created_by: userId\n        }])\n        .select();\n      \n      if (error) {\n        console.error(`Erro ao adicionar arquivo ${fileId} à categoria ${categoryId}:`, error);\n        throw error;\n      }\n      \n      return data?.[0];\n    } catch (error) {\n      console.error(`Erro ao adicionar arquivo ${fileId} à categoria ${categoryId}:`, error);\n      throw error;\n    }\n  },\n  \n  // Remover arquivo de uma categoria\n  async removeFileFromCategory(fileId: number, categoryId: number) {\n    try {\n      const { error } = await supabase\n        .from('file_category_relations')\n        .delete()\n        .eq('file_id', fileId)\n        .eq('category_id', categoryId);\n      \n      if (error) {\n        console.error(`Erro ao remover arquivo ${fileId} da categoria ${categoryId}:`, error);\n        throw error;\n      }\n      \n      return true;\n    } catch (error) {\n      console.error(`Erro ao remover arquivo ${fileId} da categoria ${categoryId}:`, error);\n      throw error;\n    }\n  },\n  \n  // Obter categorias de um arquivo\n  async getCategoriesByFileId(fileId: number) {\n    try {\n      const { data, error } = await supabase\n        .from('file_category_relations')\n        .select(`\n          category_id,\n          category:category_id(*)\n        `)\n        .eq('file_id', fileId);\n      \n      if (error) {\n        console.error(`Erro ao buscar categorias do arquivo ${fileId}:`, error);\n        throw error;\n      }\n      \n      return data.map(item => item.category);\n    } catch (error) {\n      console.error(`Erro ao buscar categorias do arquivo ${fileId}:`, error);\n      throw error;\n    }\n  },\n  \n  // Obter arquivos de uma categoria\n  async getFilesByCategoryId(categoryId: number) {\n    try {\n      const { data, error } = await supabase\n        .from('file_category_relations')\n        .select(`\n          file_id,\n          file:file_id(*)\n        `)\n        .eq('category_id', categoryId);\n      \n      if (error) {\n        console.error(`Erro ao buscar arquivos da categoria ${categoryId}:`, error);\n        throw error;\n      }\n      \n      return data.map(item => item.file);\n    } catch (error) {\n      console.error(`Erro ao buscar arquivos da categoria ${categoryId}:`, error);\n      throw error;\n    }\n  }\n};\n\n// Função para criar tabelas de categorias no Supabase\nexport const createCategoryTables = async () => {\n  try {\n    // Verificar se a tabela de categorias existe\n    const { error: checkCategoriesError } = await supabase.rpc('exec', { \n      query: `SELECT to_regclass('public.file_categories');` \n    });\n    \n    if (checkCategoriesError) {\n      console.log('Criando tabela de categorias...');\n      \n      // Criar a tabela file_categories\n      const createCategoriesQuery = `\n        CREATE TABLE IF NOT EXISTS file_categories (\n          id BIGINT GENERATED ALWAYS AS IDENTITY PRIMARY KEY,\n          name TEXT NOT NULL,\n          description TEXT,\n          color TEXT,\n          icon TEXT,\n          empresa_id BIGINT REFERENCES dv_cad_empresas_drive(id),\n          user_id TEXT NOT NULL,\n          parent_id BIGINT REFERENCES file_categories(id),\n          created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()\n        );\n        \n        CREATE INDEX IF NOT EXISTS idx_file_categories_user_id ON file_categories(user_id);\n        CREATE INDEX IF NOT EXISTS idx_file_categories_empresa_id ON file_categories(empresa_id);\n      `;\n      \n      const { error: createCategoriesError } = await supabase.rpc('exec', { \n        query: createCategoriesQuery \n      });\n      \n      if (createCategoriesError) {\n        console.error('Erro ao criar tabela de categorias:', createCategoriesError);\n        throw createCategoriesError;\n      }\n    }\n    \n    // Verificar se a tabela de relações arquivo-categoria existe\n    const { error: checkRelationsError } = await supabase.rpc('exec', { \n      query: `SELECT to_regclass('public.file_category_relations');` \n    });\n    \n    if (checkRelationsError) {\n      console.log('Criando tabela de relações arquivo-categoria...');\n      \n      // Criar a tabela file_category_relations\n      const createRelationsQuery = `\n        CREATE TABLE IF NOT EXISTS file_category_relations (\n          id BIGINT GENERATED ALWAYS AS IDENTITY PRIMARY KEY,\n          file_id BIGINT REFERENCES files(id) ON DELETE CASCADE,\n          category_id BIGINT REFERENCES file_categories(id) ON DELETE CASCADE,\n          created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),\n          created_by TEXT NOT NULL,\n          UNIQUE(file_id, category_id)\n        );\n        \n        CREATE INDEX IF NOT EXISTS idx_file_category_relations_file_id ON file_category_relations(file_id);\n        CREATE INDEX IF NOT EXISTS idx_file_category_relations_category_id ON file_category_relations(category_id);\n      `;\n      \n      const { error: createRelationsError } = await supabase.rpc('exec', { \n        query: createRelationsQuery \n      });\n      \n      if (createRelationsError) {\n        console.error('Erro ao criar tabela de relações arquivo-categoria:', createRelationsError);\n        throw createRelationsError;\n      }\n    }\n    \n    return { success: true };\n  } catch (error) {\n    console.error('Erro ao criar tabelas de categorias:', error);\n    return { success: false, error };\n  }\n};\n"],"mappings":"AAAA,SAASA,QAAQ,QAAQ,YAAY;;AAErC;AACA;AACA;;AAEA;;AAaA;;AASA;AACA,OAAO,MAAMC,YAAY,GAAG;EAC1B;EACA,MAAMC,MAAMA,CAACC,IAAkB,EAAE;IAC/B,IAAI;MACF,MAAM;QAAEA,IAAI,EAAEC,MAAM;QAAEC;MAAM,CAAC,GAAG,MAAML,QAAQ,CAC3CM,IAAI,CAAC,iBAAiB,CAAC,CACvBC,MAAM,CAAC,CAACJ,IAAI,CAAC,CAAC,CACdK,MAAM,CAAC,CAAC;MAEX,IAAIH,KAAK,EAAE;QACTI,OAAO,CAACJ,KAAK,CAAC,0BAA0B,EAAEA,KAAK,CAAC;QAChD,MAAMA,KAAK;MACb;MAEA,OAAOD,MAAM,aAANA,MAAM,uBAANA,MAAM,CAAG,CAAC,CAAC;IACpB,CAAC,CAAC,OAAOC,KAAK,EAAE;MACdI,OAAO,CAACJ,KAAK,CAAC,0BAA0B,EAAEA,KAAK,CAAC;MAChD,MAAMA,KAAK;IACb;EACF,CAAC;EAED;EACA,MAAMK,WAAWA,CAACC,MAAc,EAAE;IAChC,IAAI;MACF,MAAM;QAAER,IAAI;QAAEE;MAAM,CAAC,GAAG,MAAML,QAAQ,CACnCM,IAAI,CAAC,iBAAiB,CAAC,CACvBE,MAAM,CAAC,GAAG,CAAC,CACXI,EAAE,CAAC,SAAS,EAAED,MAAM,CAAC,CACrBE,KAAK,CAAC,MAAM,CAAC;MAEhB,IAAIR,KAAK,EAAE;QACTI,OAAO,CAACJ,KAAK,CAAC,wCAAwCM,MAAM,GAAG,EAAEN,KAAK,CAAC;QACvE,MAAMA,KAAK;MACb;MAEA,OAAOF,IAAI;IACb,CAAC,CAAC,OAAOE,KAAK,EAAE;MACdI,OAAO,CAACJ,KAAK,CAAC,wCAAwCM,MAAM,GAAG,EAAEN,KAAK,CAAC;MACvE,MAAMA,KAAK;IACb;EACF,CAAC;EAED;EACA,MAAMS,cAAcA,CAACC,SAAiB,EAAE;IACtC,IAAI;MACF,MAAM;QAAEZ,IAAI;QAAEE;MAAM,CAAC,GAAG,MAAML,QAAQ,CACnCM,IAAI,CAAC,iBAAiB,CAAC,CACvBE,MAAM,CAAC,GAAG,CAAC,CACXI,EAAE,CAAC,YAAY,EAAEG,SAAS,CAAC,CAC3BF,KAAK,CAAC,MAAM,CAAC;MAEhB,IAAIR,KAAK,EAAE;QACTI,OAAO,CAACJ,KAAK,CAAC,wCAAwCU,SAAS,GAAG,EAAEV,KAAK,CAAC;QAC1E,MAAMA,KAAK;MACb;MAEA,OAAOF,IAAI;IACb,CAAC,CAAC,OAAOE,KAAK,EAAE;MACdI,OAAO,CAACJ,KAAK,CAAC,wCAAwCU,SAAS,GAAG,EAAEV,KAAK,CAAC;MAC1E,MAAMA,KAAK;IACb;EACF,CAAC;EAED;EACA,MAAMW,OAAOA,CAACC,EAAU,EAAE;IACxB,IAAI;MACF,MAAM;QAAEd,IAAI;QAAEE;MAAM,CAAC,GAAG,MAAML,QAAQ,CACnCM,IAAI,CAAC,iBAAiB,CAAC,CACvBE,MAAM,CAAC,GAAG,CAAC,CACXI,EAAE,CAAC,IAAI,EAAEK,EAAE,CAAC,CACZC,MAAM,CAAC,CAAC;MAEX,IAAIb,KAAK,EAAE;QACTI,OAAO,CAACJ,KAAK,CAAC,4BAA4BY,EAAE,GAAG,EAAEZ,KAAK,CAAC;QACvD,MAAMA,KAAK;MACb;MAEA,OAAOF,IAAI;IACb,CAAC,CAAC,OAAOE,KAAK,EAAE;MACdI,OAAO,CAACJ,KAAK,CAAC,4BAA4BY,EAAE,GAAG,EAAEZ,KAAK,CAAC;MACvD,MAAMA,KAAK;IACb;EACF,CAAC;EAED;EACA,MAAMc,MAAMA,CAACF,EAAU,EAAEd,IAA2B,EAAE;IACpD,IAAI;MACF,MAAM;QAAEA,IAAI,EAAEC,MAAM;QAAEC;MAAM,CAAC,GAAG,MAAML,QAAQ,CAC3CM,IAAI,CAAC,iBAAiB,CAAC,CACvBa,MAAM,CAAChB,IAAI,CAAC,CACZS,EAAE,CAAC,IAAI,EAAEK,EAAE,CAAC,CACZT,MAAM,CAAC,CAAC;MAEX,IAAIH,KAAK,EAAE;QACTI,OAAO,CAACJ,KAAK,CAAC,+BAA+BY,EAAE,GAAG,EAAEZ,KAAK,CAAC;QAC1D,MAAMA,KAAK;MACb;MAEA,OAAOD,MAAM,aAANA,MAAM,uBAANA,MAAM,CAAG,CAAC,CAAC;IACpB,CAAC,CAAC,OAAOC,KAAK,EAAE;MACdI,OAAO,CAACJ,KAAK,CAAC,+BAA+BY,EAAE,GAAG,EAAEZ,KAAK,CAAC;MAC1D,MAAMA,KAAK;IACb;EACF,CAAC;EAED;EACA,MAAMe,MAAMA,CAACH,EAAU,EAAE;IACvB,IAAI;MACF,MAAM;QAAEZ;MAAM,CAAC,GAAG,MAAML,QAAQ,CAC7BM,IAAI,CAAC,iBAAiB,CAAC,CACvBc,MAAM,CAAC,CAAC,CACRR,EAAE,CAAC,IAAI,EAAEK,EAAE,CAAC;MAEf,IAAIZ,KAAK,EAAE;QACTI,OAAO,CAACJ,KAAK,CAAC,6BAA6BY,EAAE,GAAG,EAAEZ,KAAK,CAAC;QACxD,MAAMA,KAAK;MACb;MAEA,OAAO,IAAI;IACb,CAAC,CAAC,OAAOA,KAAK,EAAE;MACdI,OAAO,CAACJ,KAAK,CAAC,6BAA6BY,EAAE,GAAG,EAAEZ,KAAK,CAAC;MACxD,MAAMA,KAAK;IACb;EACF;AACF,CAAC;;AAED;AACA,OAAO,MAAMgB,gBAAgB,GAAG;EAC9B;EACA,MAAMC,iBAAiBA,CAACC,MAAc,EAAEC,UAAkB,EAAEb,MAAc,EAAE;IAC1E,IAAI;MACF,MAAM;QAAER,IAAI;QAAEE;MAAM,CAAC,GAAG,MAAML,QAAQ,CACnCM,IAAI,CAAC,yBAAyB,CAAC,CAC/BC,MAAM,CAAC,CAAC;QACPkB,OAAO,EAAEF,MAAM;QACfG,WAAW,EAAEF,UAAU;QACvBG,UAAU,EAAEhB;MACd,CAAC,CAAC,CAAC,CACFH,MAAM,CAAC,CAAC;MAEX,IAAIH,KAAK,EAAE;QACTI,OAAO,CAACJ,KAAK,CAAC,6BAA6BkB,MAAM,gBAAgBC,UAAU,GAAG,EAAEnB,KAAK,CAAC;QACtF,MAAMA,KAAK;MACb;MAEA,OAAOF,IAAI,aAAJA,IAAI,uBAAJA,IAAI,CAAG,CAAC,CAAC;IAClB,CAAC,CAAC,OAAOE,KAAK,EAAE;MACdI,OAAO,CAACJ,KAAK,CAAC,6BAA6BkB,MAAM,gBAAgBC,UAAU,GAAG,EAAEnB,KAAK,CAAC;MACtF,MAAMA,KAAK;IACb;EACF,CAAC;EAED;EACA,MAAMuB,sBAAsBA,CAACL,MAAc,EAAEC,UAAkB,EAAE;IAC/D,IAAI;MACF,MAAM;QAAEnB;MAAM,CAAC,GAAG,MAAML,QAAQ,CAC7BM,IAAI,CAAC,yBAAyB,CAAC,CAC/Bc,MAAM,CAAC,CAAC,CACRR,EAAE,CAAC,SAAS,EAAEW,MAAM,CAAC,CACrBX,EAAE,CAAC,aAAa,EAAEY,UAAU,CAAC;MAEhC,IAAInB,KAAK,EAAE;QACTI,OAAO,CAACJ,KAAK,CAAC,2BAA2BkB,MAAM,iBAAiBC,UAAU,GAAG,EAAEnB,KAAK,CAAC;QACrF,MAAMA,KAAK;MACb;MAEA,OAAO,IAAI;IACb,CAAC,CAAC,OAAOA,KAAK,EAAE;MACdI,OAAO,CAACJ,KAAK,CAAC,2BAA2BkB,MAAM,iBAAiBC,UAAU,GAAG,EAAEnB,KAAK,CAAC;MACrF,MAAMA,KAAK;IACb;EACF,CAAC;EAED;EACA,MAAMwB,qBAAqBA,CAACN,MAAc,EAAE;IAC1C,IAAI;MACF,MAAM;QAAEpB,IAAI;QAAEE;MAAM,CAAC,GAAG,MAAML,QAAQ,CACnCM,IAAI,CAAC,yBAAyB,CAAC,CAC/BE,MAAM,CAAC;AAChB;AACA;AACA,SAAS,CAAC,CACDI,EAAE,CAAC,SAAS,EAAEW,MAAM,CAAC;MAExB,IAAIlB,KAAK,EAAE;QACTI,OAAO,CAACJ,KAAK,CAAC,wCAAwCkB,MAAM,GAAG,EAAElB,KAAK,CAAC;QACvE,MAAMA,KAAK;MACb;MAEA,OAAOF,IAAI,CAAC2B,GAAG,CAACC,IAAI,IAAIA,IAAI,CAACC,QAAQ,CAAC;IACxC,CAAC,CAAC,OAAO3B,KAAK,EAAE;MACdI,OAAO,CAACJ,KAAK,CAAC,wCAAwCkB,MAAM,GAAG,EAAElB,KAAK,CAAC;MACvE,MAAMA,KAAK;IACb;EACF,CAAC;EAED;EACA,MAAM4B,oBAAoBA,CAACT,UAAkB,EAAE;IAC7C,IAAI;MACF,MAAM;QAAErB,IAAI;QAAEE;MAAM,CAAC,GAAG,MAAML,QAAQ,CACnCM,IAAI,CAAC,yBAAyB,CAAC,CAC/BE,MAAM,CAAC;AAChB;AACA;AACA,SAAS,CAAC,CACDI,EAAE,CAAC,aAAa,EAAEY,UAAU,CAAC;MAEhC,IAAInB,KAAK,EAAE;QACTI,OAAO,CAACJ,KAAK,CAAC,wCAAwCmB,UAAU,GAAG,EAAEnB,KAAK,CAAC;QAC3E,MAAMA,KAAK;MACb;MAEA,OAAOF,IAAI,CAAC2B,GAAG,CAACC,IAAI,IAAIA,IAAI,CAACG,IAAI,CAAC;IACpC,CAAC,CAAC,OAAO7B,KAAK,EAAE;MACdI,OAAO,CAACJ,KAAK,CAAC,wCAAwCmB,UAAU,GAAG,EAAEnB,KAAK,CAAC;MAC3E,MAAMA,KAAK;IACb;EACF;AACF,CAAC;;AAED;AACA,OAAO,MAAM8B,oBAAoB,GAAG,MAAAA,CAAA,KAAY;EAC9C,IAAI;IACF;IACA,MAAM;MAAE9B,KAAK,EAAE+B;IAAqB,CAAC,GAAG,MAAMpC,QAAQ,CAACqC,GAAG,CAAC,MAAM,EAAE;MACjEC,KAAK,EAAE;IACT,CAAC,CAAC;IAEF,IAAIF,oBAAoB,EAAE;MACxB3B,OAAO,CAAC8B,GAAG,CAAC,iCAAiC,CAAC;;MAE9C;MACA,MAAMC,qBAAqB,GAAG;AACpC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;MAED,MAAM;QAAEnC,KAAK,EAAEoC;MAAsB,CAAC,GAAG,MAAMzC,QAAQ,CAACqC,GAAG,CAAC,MAAM,EAAE;QAClEC,KAAK,EAAEE;MACT,CAAC,CAAC;MAEF,IAAIC,qBAAqB,EAAE;QACzBhC,OAAO,CAACJ,KAAK,CAAC,qCAAqC,EAAEoC,qBAAqB,CAAC;QAC3E,MAAMA,qBAAqB;MAC7B;IACF;;IAEA;IACA,MAAM;MAAEpC,KAAK,EAAEqC;IAAoB,CAAC,GAAG,MAAM1C,QAAQ,CAACqC,GAAG,CAAC,MAAM,EAAE;MAChEC,KAAK,EAAE;IACT,CAAC,CAAC;IAEF,IAAII,mBAAmB,EAAE;MACvBjC,OAAO,CAAC8B,GAAG,CAAC,iDAAiD,CAAC;;MAE9D;MACA,MAAMI,oBAAoB,GAAG;AACnC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;MAED,MAAM;QAAEtC,KAAK,EAAEuC;MAAqB,CAAC,GAAG,MAAM5C,QAAQ,CAACqC,GAAG,CAAC,MAAM,EAAE;QACjEC,KAAK,EAAEK;MACT,CAAC,CAAC;MAEF,IAAIC,oBAAoB,EAAE;QACxBnC,OAAO,CAACJ,KAAK,CAAC,qDAAqD,EAAEuC,oBAAoB,CAAC;QAC1F,MAAMA,oBAAoB;MAC5B;IACF;IAEA,OAAO;MAAEC,OAAO,EAAE;IAAK,CAAC;EAC1B,CAAC,CAAC,OAAOxC,KAAK,EAAE;IACdI,OAAO,CAACJ,KAAK,CAAC,sCAAsC,EAAEA,KAAK,CAAC;IAC5D,OAAO;MAAEwC,OAAO,EAAE,KAAK;MAAExC;IAAM,CAAC;EAClC;AACF,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}