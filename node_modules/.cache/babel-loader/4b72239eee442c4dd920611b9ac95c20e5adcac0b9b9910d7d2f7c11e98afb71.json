{"ast":null,"code":"var _jsxFileName = \"/root/m-software/drive-react/src/contexts/SupabaseContext.tsx\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { createContext, useContext, useState, useEffect } from 'react';\nimport { createClient } from '@supabase/supabase-js';\n\n// Interface para configuração do Supabase\n\n// Contexto para o cliente Supabase\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n// Criar contexto\nconst SupabaseContext = /*#__PURE__*/createContext({\n  supabase: {},\n  isLoading: true,\n  user: null,\n  config: {}\n});\n\n// Determinar qual configuração usar com base na variável de ambiente\nconst getSupabaseConfig = () => {\n  const useLocalSupabase = process.env.REACT_APP_USE_LOCAL_SUPABASE === 'true';\n  if (useLocalSupabase) {\n    // Usar Supabase local\n    return {\n      url: process.env.REACT_APP_DRIVE_SUPABASE_URL || 'http://localhost:8000',\n      key: process.env.REACT_APP_DRIVE_SUPABASE_ANON_KEY || '',\n      serviceRoleKey: process.env.REACT_APP_DRIVE_SUPABASE_SERVICE_ROLE_KEY,\n      isLocal: true\n    };\n  } else {\n    // Usar Supabase na nuvem\n    return {\n      url: process.env.REACT_APP_SUPABASE_URL || 'https://hbgmyrooyrisunhczfna.supabase.co',\n      key: process.env.REACT_APP_SUPABASE_ANON_KEY || '',\n      serviceRoleKey: process.env.REACT_APP_SUPABASE_SERVICE_ROLE_KEY,\n      isLocal: false\n    };\n  }\n};\n\n// Provedor do contexto Supabase\nexport const SupabaseProvider = ({\n  children\n}) => {\n  _s();\n  const config = getSupabaseConfig();\n  const [supabase] = useState(() => createClient(config.url, config.key, {\n    auth: {\n      autoRefreshToken: true,\n      persistSession: true,\n      detectSessionInUrl: true\n    }\n  }));\n  const [isLoading, setIsLoading] = useState(true);\n  const [user, setUser] = useState(null);\n  useEffect(() => {\n    // Verificar se o usuário já está autenticado\n    const checkUser = async () => {\n      try {\n        const {\n          data\n        } = await supabase.auth.getUser();\n        setUser(data.user);\n      } catch (error) {\n        console.error('Erro ao verificar usuário:', error);\n      } finally {\n        setIsLoading(false);\n      }\n    };\n    checkUser();\n\n    // Configurar listener para mudanças de autenticação\n    const {\n      data: {\n        subscription\n      }\n    } = supabase.auth.onAuthStateChange((event, session) => {\n      if (event === 'SIGNED_IN') {\n        setUser((session === null || session === void 0 ? void 0 : session.user) || null);\n      } else if (event === 'SIGNED_OUT') {\n        setUser(null);\n      }\n    });\n    return () => {\n      // Limpar listener ao desmontar o componente\n      subscription.unsubscribe();\n    };\n  }, [supabase]);\n\n  // Mostrar informações sobre a conexão no console (apenas em desenvolvimento)\n  useEffect(() => {\n    if (process.env.NODE_ENV === 'development') {\n      console.log(`Conectado ao Supabase ${config.isLocal ? 'Local' : 'Cloud'}`);\n      console.log(`URL: ${config.url}`);\n    }\n  }, [config]);\n  return /*#__PURE__*/_jsxDEV(SupabaseContext.Provider, {\n    value: {\n      supabase,\n      isLoading,\n      user,\n      config\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 107,\n    columnNumber: 5\n  }, this);\n};\n\n// Hook para usar o SDK Supabase\n_s(SupabaseProvider, \"AJpOGcOUPZIC3BFZSs4XeyR6hCU=\");\n_c = SupabaseProvider;\nexport const useSupabase = () => {\n  _s2();\n  return useContext(SupabaseContext);\n};\n_s2(useSupabase, \"gDsCjeeItUuvgOWf1v4qoK9RF6k=\");\nexport default SupabaseProvider;\nvar _c;\n$RefreshReg$(_c, \"SupabaseProvider\");","map":{"version":3,"names":["React","createContext","useContext","useState","useEffect","createClient","jsxDEV","_jsxDEV","SupabaseContext","supabase","isLoading","user","config","getSupabaseConfig","useLocalSupabase","process","env","REACT_APP_USE_LOCAL_SUPABASE","url","REACT_APP_DRIVE_SUPABASE_URL","key","REACT_APP_DRIVE_SUPABASE_ANON_KEY","serviceRoleKey","REACT_APP_DRIVE_SUPABASE_SERVICE_ROLE_KEY","isLocal","REACT_APP_SUPABASE_URL","REACT_APP_SUPABASE_ANON_KEY","REACT_APP_SUPABASE_SERVICE_ROLE_KEY","SupabaseProvider","children","_s","auth","autoRefreshToken","persistSession","detectSessionInUrl","setIsLoading","setUser","checkUser","data","getUser","error","console","subscription","onAuthStateChange","event","session","unsubscribe","NODE_ENV","log","Provider","value","fileName","_jsxFileName","lineNumber","columnNumber","_c","useSupabase","_s2","$RefreshReg$"],"sources":["/root/m-software/drive-react/src/contexts/SupabaseContext.tsx"],"sourcesContent":["import React, { createContext, useContext, useState, useEffect } from 'react';\nimport { createClient, SupabaseClient } from '@supabase/supabase-js';\n\n// Interface para configuração do Supabase\ninterface SupabaseConfig {\n  url: string;\n  key: string;\n  serviceRoleKey?: string;\n  isLocal: boolean;\n}\n\n// Contexto para o cliente Supabase\ninterface SupabaseContextType {\n  supabase: SupabaseClient;\n  isLoading: boolean;\n  user: any | null;\n  config: SupabaseConfig;\n}\n\n// Criar contexto\nconst SupabaseContext = createContext<SupabaseContextType>({\n  supabase: {} as SupabaseClient,\n  isLoading: true,\n  user: null,\n  config: {} as SupabaseConfig,\n});\n\n// Determinar qual configuração usar com base na variável de ambiente\nconst getSupabaseConfig = (): SupabaseConfig => {\n  const useLocalSupabase = process.env.REACT_APP_USE_LOCAL_SUPABASE === 'true';\n  \n  if (useLocalSupabase) {\n    // Usar Supabase local\n    return {\n      url: process.env.REACT_APP_DRIVE_SUPABASE_URL || 'http://localhost:8000',\n      key: process.env.REACT_APP_DRIVE_SUPABASE_ANON_KEY || '',\n      serviceRoleKey: process.env.REACT_APP_DRIVE_SUPABASE_SERVICE_ROLE_KEY,\n      isLocal: true,\n    };\n  } else {\n    // Usar Supabase na nuvem\n    return {\n      url: process.env.REACT_APP_SUPABASE_URL || 'https://hbgmyrooyrisunhczfna.supabase.co',\n      key: process.env.REACT_APP_SUPABASE_ANON_KEY || '',\n      serviceRoleKey: process.env.REACT_APP_SUPABASE_SERVICE_ROLE_KEY,\n      isLocal: false,\n    };\n  }\n};\n\n// Provedor do contexto Supabase\nexport const SupabaseProvider: React.FC<{ children: React.ReactNode }> = ({ children }) => {\n  const config = getSupabaseConfig();\n  const [supabase] = useState<SupabaseClient>(() => createClient(\n    config.url,\n    config.key,\n    {\n      auth: {\n        autoRefreshToken: true,\n        persistSession: true,\n        detectSessionInUrl: true\n      }\n    }\n  ));\n  const [isLoading, setIsLoading] = useState(true);\n  const [user, setUser] = useState<any | null>(null);\n\n  useEffect(() => {\n    // Verificar se o usuário já está autenticado\n    const checkUser = async () => {\n      try {\n        const { data } = await supabase.auth.getUser();\n        setUser(data.user);\n      } catch (error) {\n        console.error('Erro ao verificar usuário:', error);\n      } finally {\n        setIsLoading(false);\n      }\n    };\n\n    checkUser();\n\n    // Configurar listener para mudanças de autenticação\n    const { data: { subscription } } = supabase.auth.onAuthStateChange((event, session) => {\n      if (event === 'SIGNED_IN') {\n        setUser(session?.user || null);\n      } else if (event === 'SIGNED_OUT') {\n        setUser(null);\n      }\n    });\n\n    return () => {\n      // Limpar listener ao desmontar o componente\n      subscription.unsubscribe();\n    };\n  }, [supabase]);\n\n  // Mostrar informações sobre a conexão no console (apenas em desenvolvimento)\n  useEffect(() => {\n    if (process.env.NODE_ENV === 'development') {\n      console.log(`Conectado ao Supabase ${config.isLocal ? 'Local' : 'Cloud'}`);\n      console.log(`URL: ${config.url}`);\n    }\n  }, [config]);\n\n  return (\n    <SupabaseContext.Provider value={{ supabase, isLoading, user, config }}>\n      {children}\n    </SupabaseContext.Provider>\n  );\n};\n\n// Hook para usar o SDK Supabase\nexport const useSupabase = () => useContext(SupabaseContext);\n\nexport default SupabaseProvider;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}