{"ast":null,"code":"var _jsxFileName = \"/root/m-software/drive-react/src/contexts/AuthContext.tsx\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { createContext, useContext, useState, useEffect } from 'react';\nimport { supabase } from '../services/supabase';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst AuthContext = /*#__PURE__*/createContext(undefined);\nexport const AuthProvider = ({\n  children\n}) => {\n  _s();\n  const [session, setSession] = useState(null);\n  const [user, setUser] = useState(null);\n  const [loading, setLoading] = useState(true);\n  useEffect(() => {\n    // Obter sessão atual\n    supabase.auth.getSession().then(({\n      data: {\n        session\n      }\n    }) => {\n      var _session$user;\n      setSession(session);\n      setUser((_session$user = session === null || session === void 0 ? void 0 : session.user) !== null && _session$user !== void 0 ? _session$user : null);\n      setLoading(false);\n    });\n\n    // Configurar listener para mudanças na autenticação\n    const {\n      data: {\n        subscription\n      }\n    } = supabase.auth.onAuthStateChange((_event, session) => {\n      var _session$user2;\n      setSession(session);\n      setUser((_session$user2 = session === null || session === void 0 ? void 0 : session.user) !== null && _session$user2 !== void 0 ? _session$user2 : null);\n      setLoading(false);\n    });\n    return () => subscription.unsubscribe();\n  }, []);\n  const signIn = async (email, password) => {\n    try {\n      const {\n        error\n      } = await supabase.auth.signInWithPassword({\n        email,\n        password\n      });\n      return {\n        error\n      };\n    } catch (error) {\n      return {\n        error\n      };\n    }\n  };\n  const signUp = async (email, password, username, adminPassword) => {\n    // Verificar se todos os campos foram preenchidos\n    if (!email || !password || !username || !adminPassword) {\n      return {\n        error: {\n          message: 'Todos os campos são obrigatórios'\n        }\n      };\n    }\n\n    // Verificar senha de administrador usando a variável de ambiente\n    const ADMIN_PASSWORD = process.env.REACT_APP_ADMIN_PASSWORD;\n    if (adminPassword !== ADMIN_PASSWORD) {\n      return {\n        error: {\n          message: 'Senha de autorização incorreta!'\n        }\n      };\n    }\n\n    // Validar formato de email\n    const emailRegex = /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/;\n    if (!emailRegex.test(email)) {\n      return {\n        error: {\n          message: 'Formato de email inválido'\n        }\n      };\n    }\n\n    // Validar tamanho da senha\n    if (password.length < 6) {\n      return {\n        error: {\n          message: 'A senha deve ter pelo menos 6 caracteres'\n        }\n      };\n    }\n\n    // Validar nome de usuário\n    if (username.length < 3) {\n      return {\n        error: {\n          message: 'O nome de usuário deve ter pelo menos 3 caracteres'\n        }\n      };\n    }\n    try {\n      // 1. Registrar o usuário no sistema de autenticação do Supabase\n      const {\n        data: authData,\n        error: authError\n      } = await supabase.auth.signUp({\n        email,\n        password,\n        options: {\n          data: {\n            username\n          }\n        }\n      });\n      if (authError) {\n        return {\n          error: authError\n        };\n      }\n\n      // 2. Inserir um registro na tabela dv_restricao_user (padrão como 'admin')\n      const {\n        data: restricaoData,\n        error: restricaoError\n      } = await supabase.from('dv_restricao_user').insert([{\n        dv_tipo_restricao: 'admin'\n      }]).select();\n      if (restricaoError) {\n        console.error('Erro ao criar registro de restrição:', restricaoError);\n        return {\n          error: {\n            message: 'Erro ao criar perfil de usuário'\n          }\n        };\n      }\n\n      // 3. Inserir um registro na tabela dv_cad_empresas_drive\n      const restricaoId = restricaoData[0].id;\n      const {\n        data: empresaData,\n        error: empresaError\n      } = await supabase.from('dv_cad_empresas_drive').insert([{\n        dv_nome: username,\n        dv_email: email,\n        dv_senha: password,\n        // Nota: em produção, não armazenar senhas em texto simples\n        dv_tipo_restricao: restricaoId\n      }]).select();\n      if (empresaError) {\n        console.error('Erro ao criar registro de empresa:', empresaError);\n        return {\n          error: {\n            message: 'Erro ao criar perfil de empresa'\n          }\n        };\n      }\n\n      // 4. Atualizar o registro na tabela dv_restricao_user com o ID do usuário\n      if (empresaData && empresaData.length > 0) {\n        const usuarioId = empresaData[0].id;\n        const {\n          error: updateError\n        } = await supabase.from('dv_restricao_user').update({\n          usuario_id: usuarioId\n        }).eq('id', restricaoId);\n        if (updateError) {\n          console.error('Erro ao atualizar referência de usuário:', updateError);\n          // Não retornamos erro aqui para não interromper o fluxo de cadastro\n          // já que o usuário foi criado com sucesso\n        }\n      }\n      return {\n        error: null\n      };\n    } catch (error) {\n      console.error('Erro no processo de cadastro:', error);\n      return {\n        error\n      };\n    }\n  };\n  const signOut = async () => {\n    await supabase.auth.signOut();\n  };\n  const value = {\n    session,\n    user,\n    loading,\n    signIn,\n    signUp,\n    signOut\n  };\n  return /*#__PURE__*/_jsxDEV(AuthContext.Provider, {\n    value: value,\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 158,\n    columnNumber: 10\n  }, this);\n};\n_s(AuthProvider, \"OmtWNs1wmtvVriGCMVMhIptcvUQ=\");\n_c = AuthProvider;\nexport const useAuth = () => {\n  _s2();\n  const context = useContext(AuthContext);\n  if (context === undefined) {\n    throw new Error('useAuth deve ser usado dentro de um AuthProvider');\n  }\n  return context;\n};\n_s2(useAuth, \"b9L3QQ+jgeyIrH0NfHrJ8nn7VMU=\");\nexport default AuthContext;\nvar _c;\n$RefreshReg$(_c, \"AuthProvider\");","map":{"version":3,"names":["React","createContext","useContext","useState","useEffect","supabase","jsxDEV","_jsxDEV","AuthContext","undefined","AuthProvider","children","_s","session","setSession","user","setUser","loading","setLoading","auth","getSession","then","data","_session$user","subscription","onAuthStateChange","_event","_session$user2","unsubscribe","signIn","email","password","error","signInWithPassword","signUp","username","adminPassword","message","ADMIN_PASSWORD","process","env","REACT_APP_ADMIN_PASSWORD","emailRegex","test","length","authData","authError","options","restricaoData","restricaoError","from","insert","dv_tipo_restricao","select","console","restricaoId","id","empresaData","empresaError","dv_nome","dv_email","dv_senha","usuarioId","updateError","update","usuario_id","eq","signOut","value","Provider","fileName","_jsxFileName","lineNumber","columnNumber","_c","useAuth","_s2","context","Error","$RefreshReg$"],"sources":["/root/m-software/drive-react/src/contexts/AuthContext.tsx"],"sourcesContent":["import React, { createContext, useContext, useState, useEffect, ReactNode } from 'react';\nimport { Session, User } from '@supabase/supabase-js';\nimport { supabase } from '../services/supabase';\n\ninterface AuthContextType {\n  session: Session | null;\n  user: User | null;\n  loading: boolean;\n  signIn: (email: string, password: string) => Promise<{ error: any }>;\n  signUp: (email: string, password: string, username: string, adminPassword: string) => Promise<{ error: any }>;\n  signOut: () => Promise<void>;\n}\n\nconst AuthContext = createContext<AuthContextType | undefined>(undefined);\n\ninterface AuthProviderProps {\n  children: ReactNode;\n}\n\nexport const AuthProvider: React.FC<AuthProviderProps> = ({ children }) => {\n  const [session, setSession] = useState<Session | null>(null);\n  const [user, setUser] = useState<User | null>(null);\n  const [loading, setLoading] = useState(true);\n\n  useEffect(() => {\n    // Obter sessão atual\n    supabase.auth.getSession().then(({ data: { session } }) => {\n      setSession(session);\n      setUser(session?.user ?? null);\n      setLoading(false);\n    });\n\n    // Configurar listener para mudanças na autenticação\n    const { data: { subscription } } = supabase.auth.onAuthStateChange((_event, session) => {\n      setSession(session);\n      setUser(session?.user ?? null);\n      setLoading(false);\n    });\n\n    return () => subscription.unsubscribe();\n  }, []);\n\n  const signIn = async (email: string, password: string) => {\n    try {\n      const { error } = await supabase.auth.signInWithPassword({ email, password });\n      return { error };\n    } catch (error) {\n      return { error };\n    }\n  };\n\n  const signUp = async (email: string, password: string, username: string, adminPassword: string) => {\n    // Verificar se todos os campos foram preenchidos\n    if (!email || !password || !username || !adminPassword) {\n      return { error: { message: 'Todos os campos são obrigatórios' } };\n    }\n    \n    // Verificar senha de administrador usando a variável de ambiente\n    const ADMIN_PASSWORD = process.env.REACT_APP_ADMIN_PASSWORD;\n    \n    if (adminPassword !== ADMIN_PASSWORD) {\n      return { error: { message: 'Senha de autorização incorreta!' } };\n    }\n    \n    // Validar formato de email\n    const emailRegex = /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/;\n    if (!emailRegex.test(email)) {\n      return { error: { message: 'Formato de email inválido' } };\n    }\n    \n    // Validar tamanho da senha\n    if (password.length < 6) {\n      return { error: { message: 'A senha deve ter pelo menos 6 caracteres' } };\n    }\n    \n    // Validar nome de usuário\n    if (username.length < 3) {\n      return { error: { message: 'O nome de usuário deve ter pelo menos 3 caracteres' } };\n    }\n\n    try {\n      // 1. Registrar o usuário no sistema de autenticação do Supabase\n      const { data: authData, error: authError } = await supabase.auth.signUp({\n        email,\n        password,\n        options: {\n          data: { username }\n        }\n      });\n      \n      if (authError) {\n        return { error: authError };\n      }\n      \n      // 2. Inserir um registro na tabela dv_restricao_user (padrão como 'admin')\n      const { data: restricaoData, error: restricaoError } = await supabase\n        .from('dv_restricao_user')\n        .insert([{ dv_tipo_restricao: 'admin' }])\n        .select();\n      \n      if (restricaoError) {\n        console.error('Erro ao criar registro de restrição:', restricaoError);\n        return { error: { message: 'Erro ao criar perfil de usuário' } };\n      }\n      \n      // 3. Inserir um registro na tabela dv_cad_empresas_drive\n      const restricaoId = restricaoData[0].id;\n      const { data: empresaData, error: empresaError } = await supabase\n        .from('dv_cad_empresas_drive')\n        .insert([{\n          dv_nome: username,\n          dv_email: email,\n          dv_senha: password, // Nota: em produção, não armazenar senhas em texto simples\n          dv_tipo_restricao: restricaoId\n        }])\n        .select();\n      \n      if (empresaError) {\n        console.error('Erro ao criar registro de empresa:', empresaError);\n        return { error: { message: 'Erro ao criar perfil de empresa' } };\n      }\n      \n      // 4. Atualizar o registro na tabela dv_restricao_user com o ID do usuário\n      if (empresaData && empresaData.length > 0) {\n        const usuarioId = empresaData[0].id;\n        const { error: updateError } = await supabase\n          .from('dv_restricao_user')\n          .update({ usuario_id: usuarioId })\n          .eq('id', restricaoId);\n        \n        if (updateError) {\n          console.error('Erro ao atualizar referência de usuário:', updateError);\n          // Não retornamos erro aqui para não interromper o fluxo de cadastro\n          // já que o usuário foi criado com sucesso\n        }\n      }\n      \n      return { error: null };\n    } catch (error) {\n      console.error('Erro no processo de cadastro:', error);\n      return { error };\n    }\n  };\n\n  const signOut = async () => {\n    await supabase.auth.signOut();\n  };\n\n  const value = {\n    session,\n    user,\n    loading,\n    signIn,\n    signUp,\n    signOut\n  };\n\n  return <AuthContext.Provider value={value}>{children}</AuthContext.Provider>;\n};\n\nexport const useAuth = () => {\n  const context = useContext(AuthContext);\n  if (context === undefined) {\n    throw new Error('useAuth deve ser usado dentro de um AuthProvider');\n  }\n  return context;\n};\n\nexport default AuthContext;\n"],"mappings":";;;AAAA,OAAOA,KAAK,IAAIC,aAAa,EAAEC,UAAU,EAAEC,QAAQ,EAAEC,SAAS,QAAmB,OAAO;AAExF,SAASC,QAAQ,QAAQ,sBAAsB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAWhD,MAAMC,WAAW,gBAAGP,aAAa,CAA8BQ,SAAS,CAAC;AAMzE,OAAO,MAAMC,YAAyC,GAAGA,CAAC;EAAEC;AAAS,CAAC,KAAK;EAAAC,EAAA;EACzE,MAAM,CAACC,OAAO,EAAEC,UAAU,CAAC,GAAGX,QAAQ,CAAiB,IAAI,CAAC;EAC5D,MAAM,CAACY,IAAI,EAAEC,OAAO,CAAC,GAAGb,QAAQ,CAAc,IAAI,CAAC;EACnD,MAAM,CAACc,OAAO,EAAEC,UAAU,CAAC,GAAGf,QAAQ,CAAC,IAAI,CAAC;EAE5CC,SAAS,CAAC,MAAM;IACd;IACAC,QAAQ,CAACc,IAAI,CAACC,UAAU,CAAC,CAAC,CAACC,IAAI,CAAC,CAAC;MAAEC,IAAI,EAAE;QAAET;MAAQ;IAAE,CAAC,KAAK;MAAA,IAAAU,aAAA;MACzDT,UAAU,CAACD,OAAO,CAAC;MACnBG,OAAO,EAAAO,aAAA,GAACV,OAAO,aAAPA,OAAO,uBAAPA,OAAO,CAAEE,IAAI,cAAAQ,aAAA,cAAAA,aAAA,GAAI,IAAI,CAAC;MAC9BL,UAAU,CAAC,KAAK,CAAC;IACnB,CAAC,CAAC;;IAEF;IACA,MAAM;MAAEI,IAAI,EAAE;QAAEE;MAAa;IAAE,CAAC,GAAGnB,QAAQ,CAACc,IAAI,CAACM,iBAAiB,CAAC,CAACC,MAAM,EAAEb,OAAO,KAAK;MAAA,IAAAc,cAAA;MACtFb,UAAU,CAACD,OAAO,CAAC;MACnBG,OAAO,EAAAW,cAAA,GAACd,OAAO,aAAPA,OAAO,uBAAPA,OAAO,CAAEE,IAAI,cAAAY,cAAA,cAAAA,cAAA,GAAI,IAAI,CAAC;MAC9BT,UAAU,CAAC,KAAK,CAAC;IACnB,CAAC,CAAC;IAEF,OAAO,MAAMM,YAAY,CAACI,WAAW,CAAC,CAAC;EACzC,CAAC,EAAE,EAAE,CAAC;EAEN,MAAMC,MAAM,GAAG,MAAAA,CAAOC,KAAa,EAAEC,QAAgB,KAAK;IACxD,IAAI;MACF,MAAM;QAAEC;MAAM,CAAC,GAAG,MAAM3B,QAAQ,CAACc,IAAI,CAACc,kBAAkB,CAAC;QAAEH,KAAK;QAAEC;MAAS,CAAC,CAAC;MAC7E,OAAO;QAAEC;MAAM,CAAC;IAClB,CAAC,CAAC,OAAOA,KAAK,EAAE;MACd,OAAO;QAAEA;MAAM,CAAC;IAClB;EACF,CAAC;EAED,MAAME,MAAM,GAAG,MAAAA,CAAOJ,KAAa,EAAEC,QAAgB,EAAEI,QAAgB,EAAEC,aAAqB,KAAK;IACjG;IACA,IAAI,CAACN,KAAK,IAAI,CAACC,QAAQ,IAAI,CAACI,QAAQ,IAAI,CAACC,aAAa,EAAE;MACtD,OAAO;QAAEJ,KAAK,EAAE;UAAEK,OAAO,EAAE;QAAmC;MAAE,CAAC;IACnE;;IAEA;IACA,MAAMC,cAAc,GAAGC,OAAO,CAACC,GAAG,CAACC,wBAAwB;IAE3D,IAAIL,aAAa,KAAKE,cAAc,EAAE;MACpC,OAAO;QAAEN,KAAK,EAAE;UAAEK,OAAO,EAAE;QAAkC;MAAE,CAAC;IAClE;;IAEA;IACA,MAAMK,UAAU,GAAG,4BAA4B;IAC/C,IAAI,CAACA,UAAU,CAACC,IAAI,CAACb,KAAK,CAAC,EAAE;MAC3B,OAAO;QAAEE,KAAK,EAAE;UAAEK,OAAO,EAAE;QAA4B;MAAE,CAAC;IAC5D;;IAEA;IACA,IAAIN,QAAQ,CAACa,MAAM,GAAG,CAAC,EAAE;MACvB,OAAO;QAAEZ,KAAK,EAAE;UAAEK,OAAO,EAAE;QAA2C;MAAE,CAAC;IAC3E;;IAEA;IACA,IAAIF,QAAQ,CAACS,MAAM,GAAG,CAAC,EAAE;MACvB,OAAO;QAAEZ,KAAK,EAAE;UAAEK,OAAO,EAAE;QAAqD;MAAE,CAAC;IACrF;IAEA,IAAI;MACF;MACA,MAAM;QAAEf,IAAI,EAAEuB,QAAQ;QAAEb,KAAK,EAAEc;MAAU,CAAC,GAAG,MAAMzC,QAAQ,CAACc,IAAI,CAACe,MAAM,CAAC;QACtEJ,KAAK;QACLC,QAAQ;QACRgB,OAAO,EAAE;UACPzB,IAAI,EAAE;YAAEa;UAAS;QACnB;MACF,CAAC,CAAC;MAEF,IAAIW,SAAS,EAAE;QACb,OAAO;UAAEd,KAAK,EAAEc;QAAU,CAAC;MAC7B;;MAEA;MACA,MAAM;QAAExB,IAAI,EAAE0B,aAAa;QAAEhB,KAAK,EAAEiB;MAAe,CAAC,GAAG,MAAM5C,QAAQ,CAClE6C,IAAI,CAAC,mBAAmB,CAAC,CACzBC,MAAM,CAAC,CAAC;QAAEC,iBAAiB,EAAE;MAAQ,CAAC,CAAC,CAAC,CACxCC,MAAM,CAAC,CAAC;MAEX,IAAIJ,cAAc,EAAE;QAClBK,OAAO,CAACtB,KAAK,CAAC,sCAAsC,EAAEiB,cAAc,CAAC;QACrE,OAAO;UAAEjB,KAAK,EAAE;YAAEK,OAAO,EAAE;UAAkC;QAAE,CAAC;MAClE;;MAEA;MACA,MAAMkB,WAAW,GAAGP,aAAa,CAAC,CAAC,CAAC,CAACQ,EAAE;MACvC,MAAM;QAAElC,IAAI,EAAEmC,WAAW;QAAEzB,KAAK,EAAE0B;MAAa,CAAC,GAAG,MAAMrD,QAAQ,CAC9D6C,IAAI,CAAC,uBAAuB,CAAC,CAC7BC,MAAM,CAAC,CAAC;QACPQ,OAAO,EAAExB,QAAQ;QACjByB,QAAQ,EAAE9B,KAAK;QACf+B,QAAQ,EAAE9B,QAAQ;QAAE;QACpBqB,iBAAiB,EAAEG;MACrB,CAAC,CAAC,CAAC,CACFF,MAAM,CAAC,CAAC;MAEX,IAAIK,YAAY,EAAE;QAChBJ,OAAO,CAACtB,KAAK,CAAC,oCAAoC,EAAE0B,YAAY,CAAC;QACjE,OAAO;UAAE1B,KAAK,EAAE;YAAEK,OAAO,EAAE;UAAkC;QAAE,CAAC;MAClE;;MAEA;MACA,IAAIoB,WAAW,IAAIA,WAAW,CAACb,MAAM,GAAG,CAAC,EAAE;QACzC,MAAMkB,SAAS,GAAGL,WAAW,CAAC,CAAC,CAAC,CAACD,EAAE;QACnC,MAAM;UAAExB,KAAK,EAAE+B;QAAY,CAAC,GAAG,MAAM1D,QAAQ,CAC1C6C,IAAI,CAAC,mBAAmB,CAAC,CACzBc,MAAM,CAAC;UAAEC,UAAU,EAAEH;QAAU,CAAC,CAAC,CACjCI,EAAE,CAAC,IAAI,EAAEX,WAAW,CAAC;QAExB,IAAIQ,WAAW,EAAE;UACfT,OAAO,CAACtB,KAAK,CAAC,0CAA0C,EAAE+B,WAAW,CAAC;UACtE;UACA;QACF;MACF;MAEA,OAAO;QAAE/B,KAAK,EAAE;MAAK,CAAC;IACxB,CAAC,CAAC,OAAOA,KAAK,EAAE;MACdsB,OAAO,CAACtB,KAAK,CAAC,+BAA+B,EAAEA,KAAK,CAAC;MACrD,OAAO;QAAEA;MAAM,CAAC;IAClB;EACF,CAAC;EAED,MAAMmC,OAAO,GAAG,MAAAA,CAAA,KAAY;IAC1B,MAAM9D,QAAQ,CAACc,IAAI,CAACgD,OAAO,CAAC,CAAC;EAC/B,CAAC;EAED,MAAMC,KAAK,GAAG;IACZvD,OAAO;IACPE,IAAI;IACJE,OAAO;IACPY,MAAM;IACNK,MAAM;IACNiC;EACF,CAAC;EAED,oBAAO5D,OAAA,CAACC,WAAW,CAAC6D,QAAQ;IAACD,KAAK,EAAEA,KAAM;IAAAzD,QAAA,EAAEA;EAAQ;IAAA2D,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAAuB,CAAC;AAC9E,CAAC;AAAC7D,EAAA,CA3IWF,YAAyC;AAAAgE,EAAA,GAAzChE,YAAyC;AA6ItD,OAAO,MAAMiE,OAAO,GAAGA,CAAA,KAAM;EAAAC,GAAA;EAC3B,MAAMC,OAAO,GAAG3E,UAAU,CAACM,WAAW,CAAC;EACvC,IAAIqE,OAAO,KAAKpE,SAAS,EAAE;IACzB,MAAM,IAAIqE,KAAK,CAAC,kDAAkD,CAAC;EACrE;EACA,OAAOD,OAAO;AAChB,CAAC;AAACD,GAAA,CANWD,OAAO;AAQpB,eAAenE,WAAW;AAAC,IAAAkE,EAAA;AAAAK,YAAA,CAAAL,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}