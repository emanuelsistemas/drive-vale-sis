{"ast":null,"code":"var _jsxFileName = \"/root/m-software/drive-react/src/components/Toast/index.tsx\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from 'react';\nimport { Container, ToastContainer, Message, CloseButton } from './styles';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Toast = ({\n  message,\n  type = 'success',\n  visible,\n  onClose\n}) => {\n  _s();\n  const [isClosing, setIsClosing] = useState(false);\n\n  // Função para fechar o toast com animação\n  const closeWithAnimation = () => {\n    setIsClosing(true);\n    setTimeout(() => {\n      setIsClosing(false);\n      onClose();\n    }, 500); // Tempo da animação de saída\n  };\n  useEffect(() => {\n    // Esconder o toast automaticamente apenas para mensagens de sucesso\n    if (visible && type === 'success') {\n      const timer = setTimeout(() => {\n        closeWithAnimation();\n      }, 3000);\n      return () => clearTimeout(timer);\n    }\n  }, [visible, type, onClose]);\n\n  // Reset do estado de fechamento quando o toast se torna visível\n  useEffect(() => {\n    if (visible) {\n      setIsClosing(false);\n    }\n  }, [visible]);\n  if (!visible) return null;\n  return /*#__PURE__*/_jsxDEV(Container, {\n    className: `${type} ${visible ? 'show' : ''} ${isClosing ? 'hide' : ''}`,\n    children: /*#__PURE__*/_jsxDEV(ToastContainer, {\n      children: [/*#__PURE__*/_jsxDEV(Message, {\n        children: message\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 48,\n        columnNumber: 9\n      }, this), type === 'error' && /*#__PURE__*/_jsxDEV(CloseButton, {\n        onClick: closeWithAnimation,\n        children: \"\\xD7\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 50,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 46,\n    columnNumber: 5\n  }, this);\n};\n_s(Toast, \"xf2VHu86a5UAFZc08Yt8SITvq5s=\");\n_c = Toast;\nexport default Toast;\nvar _c;\n$RefreshReg$(_c, \"Toast\");","map":{"version":3,"names":["React","useEffect","useState","Container","ToastContainer","Message","CloseButton","jsxDEV","_jsxDEV","Toast","message","type","visible","onClose","_s","isClosing","setIsClosing","closeWithAnimation","setTimeout","timer","clearTimeout","className","children","fileName","_jsxFileName","lineNumber","columnNumber","onClick","_c","$RefreshReg$"],"sources":["/root/m-software/drive-react/src/components/Toast/index.tsx"],"sourcesContent":["import React, { useEffect, useState } from 'react';\nimport { Container, ToastContainer, Message, CloseButton } from './styles';\n\nexport type ToastType = 'success' | 'error';\n\ninterface ToastProps {\n  message: string;\n  type?: ToastType;\n  visible: boolean;\n  onClose: () => void;\n}\n\nconst Toast: React.FC<ToastProps> = ({ message, type = 'success', visible, onClose }) => {\n  const [isClosing, setIsClosing] = useState(false);\n  \n  // Função para fechar o toast com animação\n  const closeWithAnimation = () => {\n    setIsClosing(true);\n    setTimeout(() => {\n      setIsClosing(false);\n      onClose();\n    }, 500); // Tempo da animação de saída\n  };\n  \n  useEffect(() => {\n    // Esconder o toast automaticamente apenas para mensagens de sucesso\n    if (visible && type === 'success') {\n      const timer = setTimeout(() => {\n        closeWithAnimation();\n      }, 3000);\n      \n      return () => clearTimeout(timer);\n    }\n  }, [visible, type, onClose]);\n  \n  // Reset do estado de fechamento quando o toast se torna visível\n  useEffect(() => {\n    if (visible) {\n      setIsClosing(false);\n    }\n  }, [visible]);\n\n  if (!visible) return null;\n\n  return (\n    <Container className={`${type} ${visible ? 'show' : ''} ${isClosing ? 'hide' : ''}`}>\n      <ToastContainer>\n        <Message>{message}</Message>\n        {type === 'error' && (\n          <CloseButton onClick={closeWithAnimation}>&times;</CloseButton>\n        )}\n      </ToastContainer>\n    </Container>\n  );\n};\n\nexport default Toast;\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,SAAS,EAAEC,QAAQ,QAAQ,OAAO;AAClD,SAASC,SAAS,EAAEC,cAAc,EAAEC,OAAO,EAAEC,WAAW,QAAQ,UAAU;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAW3E,MAAMC,KAA2B,GAAGA,CAAC;EAAEC,OAAO;EAAEC,IAAI,GAAG,SAAS;EAAEC,OAAO;EAAEC;AAAQ,CAAC,KAAK;EAAAC,EAAA;EACvF,MAAM,CAACC,SAAS,EAAEC,YAAY,CAAC,GAAGd,QAAQ,CAAC,KAAK,CAAC;;EAEjD;EACA,MAAMe,kBAAkB,GAAGA,CAAA,KAAM;IAC/BD,YAAY,CAAC,IAAI,CAAC;IAClBE,UAAU,CAAC,MAAM;MACfF,YAAY,CAAC,KAAK,CAAC;MACnBH,OAAO,CAAC,CAAC;IACX,CAAC,EAAE,GAAG,CAAC,CAAC,CAAC;EACX,CAAC;EAEDZ,SAAS,CAAC,MAAM;IACd;IACA,IAAIW,OAAO,IAAID,IAAI,KAAK,SAAS,EAAE;MACjC,MAAMQ,KAAK,GAAGD,UAAU,CAAC,MAAM;QAC7BD,kBAAkB,CAAC,CAAC;MACtB,CAAC,EAAE,IAAI,CAAC;MAER,OAAO,MAAMG,YAAY,CAACD,KAAK,CAAC;IAClC;EACF,CAAC,EAAE,CAACP,OAAO,EAAED,IAAI,EAAEE,OAAO,CAAC,CAAC;;EAE5B;EACAZ,SAAS,CAAC,MAAM;IACd,IAAIW,OAAO,EAAE;MACXI,YAAY,CAAC,KAAK,CAAC;IACrB;EACF,CAAC,EAAE,CAACJ,OAAO,CAAC,CAAC;EAEb,IAAI,CAACA,OAAO,EAAE,OAAO,IAAI;EAEzB,oBACEJ,OAAA,CAACL,SAAS;IAACkB,SAAS,EAAE,GAAGV,IAAI,IAAIC,OAAO,GAAG,MAAM,GAAG,EAAE,IAAIG,SAAS,GAAG,MAAM,GAAG,EAAE,EAAG;IAAAO,QAAA,eAClFd,OAAA,CAACJ,cAAc;MAAAkB,QAAA,gBACbd,OAAA,CAACH,OAAO;QAAAiB,QAAA,EAAEZ;MAAO;QAAAa,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAU,CAAC,EAC3Bf,IAAI,KAAK,OAAO,iBACfH,OAAA,CAACF,WAAW;QAACqB,OAAO,EAAEV,kBAAmB;QAAAK,QAAA,EAAC;MAAO;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAa,CAC/D;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACa;EAAC;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACR,CAAC;AAEhB,CAAC;AAACZ,EAAA,CA1CIL,KAA2B;AAAAmB,EAAA,GAA3BnB,KAA2B;AA4CjC,eAAeA,KAAK;AAAC,IAAAmB,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}