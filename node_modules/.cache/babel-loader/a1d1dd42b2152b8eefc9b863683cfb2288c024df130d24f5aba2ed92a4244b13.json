{"ast":null,"code":"import React,{createContext,useContext,useState}from'react';import Toast from'../components/Toast';import{jsx as _jsx,jsxs as _jsxs}from\"react/jsx-runtime\";const ToastContext=/*#__PURE__*/createContext(undefined);export const ToastProvider=_ref=>{let{children}=_ref;const[visible,setVisible]=useState(false);const[message,setMessage]=useState('');const[type,setType]=useState('success');const showToast=function(message){let type=arguments.length>1&&arguments[1]!==undefined?arguments[1]:'success';setMessage(message);setType(type);setVisible(true);};const handleClose=()=>{setVisible(false);};return/*#__PURE__*/_jsxs(ToastContext.Provider,{value:{showToast},children:[children,/*#__PURE__*/_jsx(Toast,{message:message,type:type,visible:visible,onClose:handleClose})]});};export const useToast=()=>{const context=useContext(ToastContext);if(context===undefined){throw new Error('useToast deve ser usado dentro de um ToastProvider');}return context;};export default ToastContext;","map":{"version":3,"names":["React","createContext","useContext","useState","Toast","jsx","_jsx","jsxs","_jsxs","ToastContext","undefined","ToastProvider","_ref","children","visible","setVisible","message","setMessage","type","setType","showToast","arguments","length","handleClose","Provider","value","onClose","useToast","context","Error"],"sources":["/root/m-software/drive-react/src/contexts/ToastContext.tsx"],"sourcesContent":["import React, { createContext, useContext, useState, ReactNode } from 'react';\nimport Toast, { ToastType } from '../components/Toast';\n\ninterface ToastContextType {\n  showToast: (message: string, type?: ToastType) => void;\n}\n\nconst ToastContext = createContext<ToastContextType | undefined>(undefined);\n\ninterface ToastProviderProps {\n  children: ReactNode;\n}\n\nexport const ToastProvider: React.FC<ToastProviderProps> = ({ children }) => {\n  const [visible, setVisible] = useState(false);\n  const [message, setMessage] = useState('');\n  const [type, setType] = useState<ToastType>('success');\n\n  const showToast = (message: string, type: ToastType = 'success') => {\n    setMessage(message);\n    setType(type);\n    setVisible(true);\n  };\n\n  const handleClose = () => {\n    setVisible(false);\n  };\n\n  return (\n    <ToastContext.Provider value={{ showToast }}>\n      {children}\n      <Toast \n        message={message} \n        type={type} \n        visible={visible} \n        onClose={handleClose} \n      />\n    </ToastContext.Provider>\n  );\n};\n\nexport const useToast = () => {\n  const context = useContext(ToastContext);\n  if (context === undefined) {\n    throw new Error('useToast deve ser usado dentro de um ToastProvider');\n  }\n  return context;\n};\n\nexport default ToastContext;\n"],"mappings":"AAAA,MAAO,CAAAA,KAAK,EAAIC,aAAa,CAAEC,UAAU,CAAEC,QAAQ,KAAmB,OAAO,CAC7E,MAAO,CAAAC,KAAK,KAAqB,qBAAqB,CAAC,OAAAC,GAAA,IAAAC,IAAA,CAAAC,IAAA,IAAAC,KAAA,yBAMvD,KAAM,CAAAC,YAAY,cAAGR,aAAa,CAA+BS,SAAS,CAAC,CAM3E,MAAO,MAAM,CAAAC,aAA2C,CAAGC,IAAA,EAAkB,IAAjB,CAAEC,QAAS,CAAC,CAAAD,IAAA,CACtE,KAAM,CAACE,OAAO,CAAEC,UAAU,CAAC,CAAGZ,QAAQ,CAAC,KAAK,CAAC,CAC7C,KAAM,CAACa,OAAO,CAAEC,UAAU,CAAC,CAAGd,QAAQ,CAAC,EAAE,CAAC,CAC1C,KAAM,CAACe,IAAI,CAAEC,OAAO,CAAC,CAAGhB,QAAQ,CAAY,SAAS,CAAC,CAEtD,KAAM,CAAAiB,SAAS,CAAG,QAAAA,CAACJ,OAAe,CAAkC,IAAhC,CAAAE,IAAe,CAAAG,SAAA,CAAAC,MAAA,IAAAD,SAAA,MAAAX,SAAA,CAAAW,SAAA,IAAG,SAAS,CAC7DJ,UAAU,CAACD,OAAO,CAAC,CACnBG,OAAO,CAACD,IAAI,CAAC,CACbH,UAAU,CAAC,IAAI,CAAC,CAClB,CAAC,CAED,KAAM,CAAAQ,WAAW,CAAGA,CAAA,GAAM,CACxBR,UAAU,CAAC,KAAK,CAAC,CACnB,CAAC,CAED,mBACEP,KAAA,CAACC,YAAY,CAACe,QAAQ,EAACC,KAAK,CAAE,CAAEL,SAAU,CAAE,CAAAP,QAAA,EACzCA,QAAQ,cACTP,IAAA,CAACF,KAAK,EACJY,OAAO,CAAEA,OAAQ,CACjBE,IAAI,CAAEA,IAAK,CACXJ,OAAO,CAAEA,OAAQ,CACjBY,OAAO,CAAEH,WAAY,CACtB,CAAC,EACmB,CAAC,CAE5B,CAAC,CAED,MAAO,MAAM,CAAAI,QAAQ,CAAGA,CAAA,GAAM,CAC5B,KAAM,CAAAC,OAAO,CAAG1B,UAAU,CAACO,YAAY,CAAC,CACxC,GAAImB,OAAO,GAAKlB,SAAS,CAAE,CACzB,KAAM,IAAI,CAAAmB,KAAK,CAAC,oDAAoD,CAAC,CACvE,CACA,MAAO,CAAAD,OAAO,CAChB,CAAC,CAED,cAAe,CAAAnB,YAAY","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}