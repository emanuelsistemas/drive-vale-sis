{"ast":null,"code":"import { supabase } from './supabase';\n// Função para fazer upload de arquivo\nexport const uploadFile = async (file, userId) => {\n  try {\n    const fileExt = file.name.split('.').pop();\n    const fileName = `${Math.random().toString(36).substring(2)}.${fileExt}`;\n    const filePath = `${userId}/${fileName}`;\n    const {\n      data,\n      error\n    } = await supabase.storage.from('files').upload(filePath, file);\n    if (error) {\n      throw error;\n    }\n\n    // Registrar o arquivo no banco de dados\n    const {\n      data: fileData,\n      error: fileError\n    } = await supabase.from('files').insert([{\n      name: file.name,\n      size: file.size,\n      type: file.type,\n      path: filePath,\n      user_id: userId,\n      is_public: false\n    }]).select();\n    if (fileError) {\n      throw fileError;\n    }\n    return fileData[0];\n  } catch (error) {\n    console.error('Erro ao fazer upload:', error);\n    throw error;\n  }\n};\n\n// Função para listar arquivos do usuário\nexport const listFiles = async userId => {\n  try {\n    const {\n      data,\n      error\n    } = await supabase.from('files').select('*').eq('user_id', userId).order('created_at', {\n      ascending: false\n    });\n    if (error) {\n      throw error;\n    }\n    return data;\n  } catch (error) {\n    console.error('Erro ao listar arquivos:', error);\n    throw error;\n  }\n};\n\n// Função para obter URL de download\nexport const getFileUrl = async filePath => {\n  try {\n    const {\n      data,\n      error\n    } = await supabase.storage.from('files').createSignedUrl(filePath, 60); // URL válida por 60 segundos\n\n    if (error) {\n      throw error;\n    }\n    return data.signedUrl;\n  } catch (error) {\n    console.error('Erro ao obter URL do arquivo:', error);\n    throw error;\n  }\n};\n\n// Função para excluir arquivo\nexport const deleteFile = async (fileId, filePath) => {\n  try {\n    // Remover do storage\n    const {\n      error: storageError\n    } = await supabase.storage.from('files').remove([filePath]);\n    if (storageError) {\n      throw storageError;\n    }\n\n    // Remover do banco de dados\n    const {\n      error: dbError\n    } = await supabase.from('files').delete().eq('id', fileId);\n    if (dbError) {\n      throw dbError;\n    }\n    return true;\n  } catch (error) {\n    console.error('Erro ao excluir arquivo:', error);\n    throw error;\n  }\n};","map":{"version":3,"names":["supabase","uploadFile","file","userId","fileExt","name","split","pop","fileName","Math","random","toString","substring","filePath","data","error","storage","from","upload","fileData","fileError","insert","size","type","path","user_id","is_public","select","console","listFiles","eq","order","ascending","getFileUrl","createSignedUrl","signedUrl","deleteFile","fileId","storageError","remove","dbError","delete"],"sources":["/root/m-software/drive-react/src/services/fileService.ts"],"sourcesContent":["import { supabase } from './supabase';\nimport { FileObject } from '../types/supabase';\n\n// Função para fazer upload de arquivo\nexport const uploadFile = async (file: File, userId: string) => {\n  try {\n    const fileExt = file.name.split('.').pop();\n    const fileName = `${Math.random().toString(36).substring(2)}.${fileExt}`;\n    const filePath = `${userId}/${fileName}`;\n\n    const { data, error } = await supabase.storage\n      .from('files')\n      .upload(filePath, file);\n\n    if (error) {\n      throw error;\n    }\n\n    // Registrar o arquivo no banco de dados\n    const { data: fileData, error: fileError } = await supabase\n      .from('files')\n      .insert([\n        {\n          name: file.name,\n          size: file.size,\n          type: file.type,\n          path: filePath,\n          user_id: userId,\n          is_public: false\n        }\n      ])\n      .select();\n\n    if (fileError) {\n      throw fileError;\n    }\n\n    return fileData[0];\n  } catch (error) {\n    console.error('Erro ao fazer upload:', error);\n    throw error;\n  }\n};\n\n// Função para listar arquivos do usuário\nexport const listFiles = async (userId: string) => {\n  try {\n    const { data, error } = await supabase\n      .from('files')\n      .select('*')\n      .eq('user_id', userId)\n      .order('created_at', { ascending: false });\n\n    if (error) {\n      throw error;\n    }\n\n    return data as FileObject[];\n  } catch (error) {\n    console.error('Erro ao listar arquivos:', error);\n    throw error;\n  }\n};\n\n// Função para obter URL de download\nexport const getFileUrl = async (filePath: string) => {\n  try {\n    const { data, error } = await supabase.storage\n      .from('files')\n      .createSignedUrl(filePath, 60); // URL válida por 60 segundos\n\n    if (error) {\n      throw error;\n    }\n\n    return data.signedUrl;\n  } catch (error) {\n    console.error('Erro ao obter URL do arquivo:', error);\n    throw error;\n  }\n};\n\n// Função para excluir arquivo\nexport const deleteFile = async (fileId: string, filePath: string) => {\n  try {\n    // Remover do storage\n    const { error: storageError } = await supabase.storage\n      .from('files')\n      .remove([filePath]);\n\n    if (storageError) {\n      throw storageError;\n    }\n\n    // Remover do banco de dados\n    const { error: dbError } = await supabase\n      .from('files')\n      .delete()\n      .eq('id', fileId);\n\n    if (dbError) {\n      throw dbError;\n    }\n\n    return true;\n  } catch (error) {\n    console.error('Erro ao excluir arquivo:', error);\n    throw error;\n  }\n};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}