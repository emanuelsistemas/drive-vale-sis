{"ast":null,"code":"import { supabase } from './supabase';\n\n// Tipos para tabela de arquivos\n\n// Função para fazer upload de arquivo\nexport const uploadFile = async (file, userId, empresaId, description, tags) => {\n  try {\n    const fileExt = file.name.split('.').pop();\n    const fileName = `${Math.random().toString(36).substring(2)}.${fileExt}`;\n    const filePath = `${userId}/${fileName}`;\n    const {\n      data,\n      error\n    } = await supabase.storage.from('files').upload(filePath, file);\n    if (error) {\n      throw error;\n    }\n\n    // Registrar o arquivo no banco de dados\n    const fileRecord = {\n      name: file.name,\n      size: file.size,\n      type: file.type,\n      path: filePath,\n      user_id: userId,\n      is_public: false\n    };\n\n    // Adicionar campos opcionais se fornecidos\n    if (empresaId) fileRecord.empresa_id = empresaId;\n    if (description) fileRecord.description = description;\n    if (tags) fileRecord.tags = tags;\n    const {\n      data: fileData,\n      error: fileError\n    } = await supabase.from('files').insert([fileRecord]).select();\n    if (fileError) {\n      throw fileError;\n    }\n    return fileData[0];\n  } catch (error) {\n    console.error('Erro ao fazer upload:', error);\n    throw error;\n  }\n};\n\n// Função para listar arquivos do usuário\nexport const listFiles = async (userId, empresaId) => {\n  try {\n    let query = supabase.from('files').select('*').eq('user_id', userId).order('created_at', {\n      ascending: false\n    });\n\n    // Se fornecido um ID de empresa, filtrar por ele também\n    if (empresaId) {\n      query = query.eq('empresa_id', empresaId);\n    }\n    const {\n      data,\n      error\n    } = await query;\n    if (error) {\n      throw error;\n    }\n    return data;\n  } catch (error) {\n    console.error('Erro ao listar arquivos:', error);\n    throw error;\n  }\n};\n\n// Função para buscar arquivos por tags ou descrição\nexport const searchFiles = async (userId, searchTerm, empresaId) => {\n  try {\n    // Buscar por descrição ou nome do arquivo\n    let query = supabase.from('files').select('*').eq('user_id', userId).or(`name.ilike.%${searchTerm}%,description.ilike.%${searchTerm}%`).order('created_at', {\n      ascending: false\n    });\n\n    // Se fornecido um ID de empresa, filtrar por ele também\n    if (empresaId) {\n      query = query.eq('empresa_id', empresaId);\n    }\n    const {\n      data,\n      error\n    } = await query;\n    if (error) {\n      throw error;\n    }\n    return data;\n  } catch (error) {\n    console.error('Erro ao buscar arquivos:', error);\n    throw error;\n  }\n};\n\n// Função para obter um arquivo pelo ID\nexport const getFileById = async fileId => {\n  try {\n    const {\n      data,\n      error\n    } = await supabase.from('files').select('*').eq('id', fileId).single();\n    if (error) {\n      throw error;\n    }\n    return data;\n  } catch (error) {\n    console.error('Erro ao obter arquivo:', error);\n    throw error;\n  }\n};\n\n// Função para obter URL de download\nexport const getFileUrl = async filePath => {\n  try {\n    const {\n      data,\n      error\n    } = await supabase.storage.from('files').createSignedUrl(filePath, 60); // URL válida por 60 segundos\n\n    if (error) {\n      throw error;\n    }\n    return data.signedUrl;\n  } catch (error) {\n    console.error('Erro ao obter URL do arquivo:', error);\n    throw error;\n  }\n};\n\n// Função para atualizar informações do arquivo\nexport const updateFile = async (fileId, updates) => {\n  try {\n    // Não permitir atualização de campos críticos\n    const safeUpdates = {\n      ...updates\n    };\n    delete safeUpdates.id;\n    delete safeUpdates.path;\n    delete safeUpdates.user_id;\n    delete safeUpdates.created_at;\n\n    // Atualizar no banco de dados\n    const {\n      data,\n      error\n    } = await supabase.from('files').update(safeUpdates).eq('id', fileId).select();\n    if (error) {\n      throw error;\n    }\n    return data[0];\n  } catch (error) {\n    console.error('Erro ao atualizar arquivo:', error);\n    throw error;\n  }\n};\n\n// Função para excluir arquivo\nexport const deleteFile = async (fileId, filePath) => {\n  try {\n    // Remover do storage\n    const {\n      error: storageError\n    } = await supabase.storage.from('files').remove([filePath]);\n    if (storageError) {\n      throw storageError;\n    }\n\n    // Remover do banco de dados\n    const {\n      error: dbError\n    } = await supabase.from('files').delete().eq('id', fileId);\n    if (dbError) {\n      throw dbError;\n    }\n    return true;\n  } catch (error) {\n    console.error('Erro ao excluir arquivo:', error);\n    throw error;\n  }\n};\n\n// Função para compartilhar um arquivo (tornar público ou privado)\nexport const toggleFileVisibility = async (fileId, isPublic) => {\n  try {\n    const {\n      data,\n      error\n    } = await supabase.from('files').update({\n      is_public: isPublic\n    }).eq('id', fileId).select();\n    if (error) {\n      throw error;\n    }\n    return data[0];\n  } catch (error) {\n    console.error('Erro ao alterar visibilidade do arquivo:', error);\n    throw error;\n  }\n};\n\n// Função para obter arquivos públicos\nexport const getPublicFiles = async () => {\n  try {\n    const {\n      data,\n      error\n    } = await supabase.from('files').select('*').eq('is_public', true).order('created_at', {\n      ascending: false\n    });\n    if (error) {\n      throw error;\n    }\n    return data;\n  } catch (error) {\n    console.error('Erro ao obter arquivos públicos:', error);\n    throw error;\n  }\n};\n\n// Função para obter arquivos por empresa\nexport const getFilesByEmpresa = async empresaId => {\n  try {\n    const {\n      data,\n      error\n    } = await supabase.from('files').select('*').eq('empresa_id', empresaId).order('created_at', {\n      ascending: false\n    });\n    if (error) {\n      throw error;\n    }\n    return data;\n  } catch (error) {\n    console.error('Erro ao obter arquivos da empresa:', error);\n    throw error;\n  }\n};","map":{"version":3,"names":["supabase","uploadFile","file","userId","empresaId","description","tags","fileExt","name","split","pop","fileName","Math","random","toString","substring","filePath","data","error","storage","from","upload","fileRecord","size","type","path","user_id","is_public","empresa_id","fileData","fileError","insert","select","console","listFiles","query","eq","order","ascending","searchFiles","searchTerm","or","getFileById","fileId","single","getFileUrl","createSignedUrl","signedUrl","updateFile","updates","safeUpdates","id","created_at","update","deleteFile","storageError","remove","dbError","delete","toggleFileVisibility","isPublic","getPublicFiles","getFilesByEmpresa"],"sources":["/root/m-software/drive-react/src/services/fileService.ts"],"sourcesContent":["import { supabase } from './supabase';\nimport { FileObject } from '../types/supabase';\nimport { empresaDriveCrud } from './crudService';\n\n// Tipos para tabela de arquivos\nexport interface FileRecord {\n  id?: number;\n  name: string;\n  size: number;\n  type: string;\n  path: string;\n  user_id: string | number;\n  empresa_id?: number;\n  is_public: boolean;\n  created_at?: string;\n  updated_at?: string;\n  description?: string;\n  tags?: string[];\n}\n\n// Função para fazer upload de arquivo\nexport const uploadFile = async (file: File, userId: string, empresaId?: number, description?: string, tags?: string[]) => {\n  try {\n    const fileExt = file.name.split('.').pop();\n    const fileName = `${Math.random().toString(36).substring(2)}.${fileExt}`;\n    const filePath = `${userId}/${fileName}`;\n\n    const { data, error } = await supabase.storage\n      .from('files')\n      .upload(filePath, file);\n\n    if (error) {\n      throw error;\n    }\n\n    // Registrar o arquivo no banco de dados\n    const fileRecord: FileRecord = {\n      name: file.name,\n      size: file.size,\n      type: file.type,\n      path: filePath,\n      user_id: userId,\n      is_public: false\n    };\n    \n    // Adicionar campos opcionais se fornecidos\n    if (empresaId) fileRecord.empresa_id = empresaId;\n    if (description) fileRecord.description = description;\n    if (tags) fileRecord.tags = tags;\n\n    const { data: fileData, error: fileError } = await supabase\n      .from('files')\n      .insert([fileRecord])\n      .select();\n\n    if (fileError) {\n      throw fileError;\n    }\n\n    return fileData[0];\n  } catch (error) {\n    console.error('Erro ao fazer upload:', error);\n    throw error;\n  }\n};\n\n// Função para listar arquivos do usuário\nexport const listFiles = async (userId: string, empresaId?: number) => {\n  try {\n    let query = supabase\n      .from('files')\n      .select('*')\n      .eq('user_id', userId)\n      .order('created_at', { ascending: false });\n      \n    // Se fornecido um ID de empresa, filtrar por ele também\n    if (empresaId) {\n      query = query.eq('empresa_id', empresaId);\n    }\n\n    const { data, error } = await query;\n\n    if (error) {\n      throw error;\n    }\n\n    return data as FileRecord[];\n  } catch (error) {\n    console.error('Erro ao listar arquivos:', error);\n    throw error;\n  }\n};\n\n// Função para buscar arquivos por tags ou descrição\nexport const searchFiles = async (userId: string, searchTerm: string, empresaId?: number) => {\n  try {\n    // Buscar por descrição ou nome do arquivo\n    let query = supabase\n      .from('files')\n      .select('*')\n      .eq('user_id', userId)\n      .or(`name.ilike.%${searchTerm}%,description.ilike.%${searchTerm}%`)\n      .order('created_at', { ascending: false });\n      \n    // Se fornecido um ID de empresa, filtrar por ele também\n    if (empresaId) {\n      query = query.eq('empresa_id', empresaId);\n    }\n\n    const { data, error } = await query;\n\n    if (error) {\n      throw error;\n    }\n\n    return data as FileRecord[];\n  } catch (error) {\n    console.error('Erro ao buscar arquivos:', error);\n    throw error;\n  }\n};\n\n// Função para obter um arquivo pelo ID\nexport const getFileById = async (fileId: string) => {\n  try {\n    const { data, error } = await supabase\n      .from('files')\n      .select('*')\n      .eq('id', fileId)\n      .single();\n\n    if (error) {\n      throw error;\n    }\n\n    return data as FileRecord;\n  } catch (error) {\n    console.error('Erro ao obter arquivo:', error);\n    throw error;\n  }\n};\n\n// Função para obter URL de download\nexport const getFileUrl = async (filePath: string) => {\n  try {\n    const { data, error } = await supabase.storage\n      .from('files')\n      .createSignedUrl(filePath, 60); // URL válida por 60 segundos\n\n    if (error) {\n      throw error;\n    }\n\n    return data.signedUrl;\n  } catch (error) {\n    console.error('Erro ao obter URL do arquivo:', error);\n    throw error;\n  }\n};\n\n// Função para atualizar informações do arquivo\nexport const updateFile = async (fileId: string, updates: Partial<FileRecord>) => {\n  try {\n    // Não permitir atualização de campos críticos\n    const safeUpdates = { ...updates };\n    delete safeUpdates.id;\n    delete safeUpdates.path;\n    delete safeUpdates.user_id;\n    delete safeUpdates.created_at;\n    \n    // Atualizar no banco de dados\n    const { data, error } = await supabase\n      .from('files')\n      .update(safeUpdates)\n      .eq('id', fileId)\n      .select();\n\n    if (error) {\n      throw error;\n    }\n\n    return data[0] as FileRecord;\n  } catch (error) {\n    console.error('Erro ao atualizar arquivo:', error);\n    throw error;\n  }\n};\n\n// Função para excluir arquivo\nexport const deleteFile = async (fileId: string, filePath: string) => {\n  try {\n    // Remover do storage\n    const { error: storageError } = await supabase.storage\n      .from('files')\n      .remove([filePath]);\n\n    if (storageError) {\n      throw storageError;\n    }\n\n    // Remover do banco de dados\n    const { error: dbError } = await supabase\n      .from('files')\n      .delete()\n      .eq('id', fileId);\n\n    if (dbError) {\n      throw dbError;\n    }\n\n    return true;\n  } catch (error) {\n    console.error('Erro ao excluir arquivo:', error);\n    throw error;\n  }\n};\n\n// Função para compartilhar um arquivo (tornar público ou privado)\nexport const toggleFileVisibility = async (fileId: string, isPublic: boolean) => {\n  try {\n    const { data, error } = await supabase\n      .from('files')\n      .update({ is_public: isPublic })\n      .eq('id', fileId)\n      .select();\n\n    if (error) {\n      throw error;\n    }\n\n    return data[0] as FileRecord;\n  } catch (error) {\n    console.error('Erro ao alterar visibilidade do arquivo:', error);\n    throw error;\n  }\n};\n\n// Função para obter arquivos públicos\nexport const getPublicFiles = async () => {\n  try {\n    const { data, error } = await supabase\n      .from('files')\n      .select('*')\n      .eq('is_public', true)\n      .order('created_at', { ascending: false });\n\n    if (error) {\n      throw error;\n    }\n\n    return data as FileRecord[];\n  } catch (error) {\n    console.error('Erro ao obter arquivos públicos:', error);\n    throw error;\n  }\n};\n\n// Função para obter arquivos por empresa\nexport const getFilesByEmpresa = async (empresaId: number) => {\n  try {\n    const { data, error } = await supabase\n      .from('files')\n      .select('*')\n      .eq('empresa_id', empresaId)\n      .order('created_at', { ascending: false });\n\n    if (error) {\n      throw error;\n    }\n\n    return data as FileRecord[];\n  } catch (error) {\n    console.error('Erro ao obter arquivos da empresa:', error);\n    throw error;\n  }\n};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}