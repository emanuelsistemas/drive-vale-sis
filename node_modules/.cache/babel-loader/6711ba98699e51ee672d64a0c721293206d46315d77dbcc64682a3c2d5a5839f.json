{"ast":null,"code":"import{supabase}from'./supabase';/**\n * Função para criar as tabelas necessárias no Supabase caso não existam\n */export const createRequiredTables=async()=>{try{// Verificar se a tabela dv_restricao_user existe\nconst{data:restricaoExists,error:restricaoCheckError}=await supabase.from('dv_restricao_user').select('id').limit(1);// Se ocorrer um erro, provavelmente a tabela não existe\nif(restricaoCheckError){console.log('Criando tabela dv_restricao_user...');// Criar a tabela dv_restricao_user\nconst createRestricaoTableQuery=`\n        CREATE TABLE IF NOT EXISTS dv_restricao_user (\n          id BIGINT GENERATED ALWAYS AS IDENTITY PRIMARY KEY,\n          dv_tipo_restricao TEXT CHECK (dv_tipo_restricao IN ('admin', 'user')) DEFAULT 'admin'\n        );\n      `;const{error:createRestricaoError}=await supabase.rpc('exec',{query:createRestricaoTableQuery});if(createRestricaoError){console.error('Erro ao criar tabela dv_restricao_user:',createRestricaoError);}else{console.log('Tabela dv_restricao_user criada com sucesso!');}}// Verificar se a tabela dv_cad_empresas_drive existe\nconst{data:empresasExists,error:empresasCheckError}=await supabase.from('dv_cad_empresas_drive').select('id').limit(1);// Se ocorrer um erro, provavelmente a tabela não existe\nif(empresasCheckError){console.log('Criando tabela dv_cad_empresas_drive...');// Criar a tabela dv_cad_empresas_drive\nconst createEmpresasTableQuery=`\n        CREATE TABLE IF NOT EXISTS dv_cad_empresas_drive (\n          id BIGINT GENERATED ALWAYS AS IDENTITY PRIMARY KEY,\n          dv_nome TEXT,\n          dv_email TEXT,\n          dv_senha TEXT,\n          dv_tipo_restricao BIGINT REFERENCES dv_restricao_user(id)\n        );\n      `;const{error:createEmpresasError}=await supabase.rpc('exec',{query:createEmpresasTableQuery});if(createEmpresasError){console.error('Erro ao criar tabela dv_cad_empresas_drive:',createEmpresasError);}else{console.log('Tabela dv_cad_empresas_drive criada com sucesso!');}}return{success:true};}catch(error){console.error('Erro ao criar tabelas:',error);return{success:false,error};}};export default createRequiredTables;","map":{"version":3,"names":["supabase","createRequiredTables","data","restricaoExists","error","restricaoCheckError","from","select","limit","console","log","createRestricaoTableQuery","createRestricaoError","rpc","query","empresasExists","empresasCheckError","createEmpresasTableQuery","createEmpresasError","success"],"sources":["/root/m-software/drive-react/src/services/createTables.ts"],"sourcesContent":["import { supabase } from './supabase';\n\n/**\n * Função para criar as tabelas necessárias no Supabase caso não existam\n */\nexport const createRequiredTables = async () => {\n  try {\n    // Verificar se a tabela dv_restricao_user existe\n    const { data: restricaoExists, error: restricaoCheckError } = await supabase\n      .from('dv_restricao_user')\n      .select('id')\n      .limit(1);\n    \n    // Se ocorrer um erro, provavelmente a tabela não existe\n    if (restricaoCheckError) {\n      console.log('Criando tabela dv_restricao_user...');\n      \n      // Criar a tabela dv_restricao_user\n      const createRestricaoTableQuery = `\n        CREATE TABLE IF NOT EXISTS dv_restricao_user (\n          id BIGINT GENERATED ALWAYS AS IDENTITY PRIMARY KEY,\n          dv_tipo_restricao TEXT CHECK (dv_tipo_restricao IN ('admin', 'user')) DEFAULT 'admin'\n        );\n      `;\n      \n      const { error: createRestricaoError } = await supabase.rpc('exec', { \n        query: createRestricaoTableQuery \n      });\n      \n      if (createRestricaoError) {\n        console.error('Erro ao criar tabela dv_restricao_user:', createRestricaoError);\n      } else {\n        console.log('Tabela dv_restricao_user criada com sucesso!');\n      }\n    }\n    \n    // Verificar se a tabela dv_cad_empresas_drive existe\n    const { data: empresasExists, error: empresasCheckError } = await supabase\n      .from('dv_cad_empresas_drive')\n      .select('id')\n      .limit(1);\n    \n    // Se ocorrer um erro, provavelmente a tabela não existe\n    if (empresasCheckError) {\n      console.log('Criando tabela dv_cad_empresas_drive...');\n      \n      // Criar a tabela dv_cad_empresas_drive\n      const createEmpresasTableQuery = `\n        CREATE TABLE IF NOT EXISTS dv_cad_empresas_drive (\n          id BIGINT GENERATED ALWAYS AS IDENTITY PRIMARY KEY,\n          dv_nome TEXT,\n          dv_email TEXT,\n          dv_senha TEXT,\n          dv_tipo_restricao BIGINT REFERENCES dv_restricao_user(id)\n        );\n      `;\n      \n      const { error: createEmpresasError } = await supabase.rpc('exec', { \n        query: createEmpresasTableQuery \n      });\n      \n      if (createEmpresasError) {\n        console.error('Erro ao criar tabela dv_cad_empresas_drive:', createEmpresasError);\n      } else {\n        console.log('Tabela dv_cad_empresas_drive criada com sucesso!');\n      }\n    }\n    \n    return { success: true };\n  } catch (error) {\n    console.error('Erro ao criar tabelas:', error);\n    return { success: false, error };\n  }\n};\n\nexport default createRequiredTables;\n"],"mappings":"AAAA,OAASA,QAAQ,KAAQ,YAAY,CAErC;AACA;AACA,GACA,MAAO,MAAM,CAAAC,oBAAoB,CAAG,KAAAA,CAAA,GAAY,CAC9C,GAAI,CACF;AACA,KAAM,CAAEC,IAAI,CAAEC,eAAe,CAAEC,KAAK,CAAEC,mBAAoB,CAAC,CAAG,KAAM,CAAAL,QAAQ,CACzEM,IAAI,CAAC,mBAAmB,CAAC,CACzBC,MAAM,CAAC,IAAI,CAAC,CACZC,KAAK,CAAC,CAAC,CAAC,CAEX;AACA,GAAIH,mBAAmB,CAAE,CACvBI,OAAO,CAACC,GAAG,CAAC,qCAAqC,CAAC,CAElD;AACA,KAAM,CAAAC,yBAAyB,CAAG;AACxC;AACA;AACA;AACA;AACA,OAAO,CAED,KAAM,CAAEP,KAAK,CAAEQ,oBAAqB,CAAC,CAAG,KAAM,CAAAZ,QAAQ,CAACa,GAAG,CAAC,MAAM,CAAE,CACjEC,KAAK,CAAEH,yBACT,CAAC,CAAC,CAEF,GAAIC,oBAAoB,CAAE,CACxBH,OAAO,CAACL,KAAK,CAAC,yCAAyC,CAAEQ,oBAAoB,CAAC,CAChF,CAAC,IAAM,CACLH,OAAO,CAACC,GAAG,CAAC,8CAA8C,CAAC,CAC7D,CACF,CAEA;AACA,KAAM,CAAER,IAAI,CAAEa,cAAc,CAAEX,KAAK,CAAEY,kBAAmB,CAAC,CAAG,KAAM,CAAAhB,QAAQ,CACvEM,IAAI,CAAC,uBAAuB,CAAC,CAC7BC,MAAM,CAAC,IAAI,CAAC,CACZC,KAAK,CAAC,CAAC,CAAC,CAEX;AACA,GAAIQ,kBAAkB,CAAE,CACtBP,OAAO,CAACC,GAAG,CAAC,yCAAyC,CAAC,CAEtD;AACA,KAAM,CAAAO,wBAAwB,CAAG;AACvC;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,CAED,KAAM,CAAEb,KAAK,CAAEc,mBAAoB,CAAC,CAAG,KAAM,CAAAlB,QAAQ,CAACa,GAAG,CAAC,MAAM,CAAE,CAChEC,KAAK,CAAEG,wBACT,CAAC,CAAC,CAEF,GAAIC,mBAAmB,CAAE,CACvBT,OAAO,CAACL,KAAK,CAAC,6CAA6C,CAAEc,mBAAmB,CAAC,CACnF,CAAC,IAAM,CACLT,OAAO,CAACC,GAAG,CAAC,kDAAkD,CAAC,CACjE,CACF,CAEA,MAAO,CAAES,OAAO,CAAE,IAAK,CAAC,CAC1B,CAAE,MAAOf,KAAK,CAAE,CACdK,OAAO,CAACL,KAAK,CAAC,wBAAwB,CAAEA,KAAK,CAAC,CAC9C,MAAO,CAAEe,OAAO,CAAE,KAAK,CAAEf,KAAM,CAAC,CAClC,CACF,CAAC,CAED,cAAe,CAAAH,oBAAoB","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}