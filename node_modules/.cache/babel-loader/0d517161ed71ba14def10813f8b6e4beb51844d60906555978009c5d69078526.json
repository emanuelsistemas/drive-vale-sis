{"ast":null,"code":"import React,{createContext,useContext,useState,useEffect}from'react';import{supabase}from'../services/supabase';import{jsx as _jsx}from\"react/jsx-runtime\";const AuthContext=/*#__PURE__*/createContext(undefined);export const AuthProvider=_ref=>{let{children}=_ref;const[session,setSession]=useState(null);const[user,setUser]=useState(null);const[loading,setLoading]=useState(true);useEffect(()=>{// Obter sessão atual\nsupabase.auth.getSession().then(_ref2=>{var _session$user;let{data:{session}}=_ref2;setSession(session);setUser((_session$user=session===null||session===void 0?void 0:session.user)!==null&&_session$user!==void 0?_session$user:null);setLoading(false);});// Configurar listener para mudanças na autenticação\nconst{data:{subscription}}=supabase.auth.onAuthStateChange((_event,session)=>{var _session$user2;setSession(session);setUser((_session$user2=session===null||session===void 0?void 0:session.user)!==null&&_session$user2!==void 0?_session$user2:null);setLoading(false);});return()=>subscription.unsubscribe();},[]);const signIn=async(email,password)=>{try{const{error}=await supabase.auth.signInWithPassword({email,password});return{error};}catch(error){return{error};}};const signUp=async(email,password,username,adminPassword)=>{// Verificar senha de administrador - usando uma senha fixa para demonstração\n// Em produção, seria melhor usar variáveis de ambiente ou um sistema mais seguro\nconst ADMIN_PASSWORD='vale-sis-admin';if(adminPassword!==ADMIN_PASSWORD){return{error:{message:'Senha de autorização incorreta!'}};}// Validar email e senha\nif(!email||!password||!username){return{error:{message:'Email, senha e nome de usuário são obrigatórios'}};}if(password.length<6){return{error:{message:'A senha deve ter pelo menos 6 caracteres'}};}try{// 1. Registrar o usuário no sistema de autenticação do Supabase\nconst{data:authData,error:authError}=await supabase.auth.signUp({email,password,options:{data:{username}}});if(authError){return{error:authError};}// 2. Inserir um registro na tabela dv_restricao_user (padrão como 'admin')\nconst{data:restricaoData,error:restricaoError}=await supabase.from('dv_restricao_user').insert([{dv_tipo_restricao:'admin'}]).select();if(restricaoError){console.error('Erro ao criar registro de restrição:',restricaoError);return{error:{message:'Erro ao criar perfil de usuário'}};}// 3. Inserir um registro na tabela dv_cad_empresas_drive\nconst restricaoId=restricaoData[0].id;const{error:empresaError}=await supabase.from('dv_cad_empresas_drive').insert([{dv_nome:username,dv_email:email,dv_senha:password,// Nota: em produção, não armazenar senhas em texto simples\ndv_tipo_restricao:restricaoId}]);if(empresaError){console.error('Erro ao criar registro de empresa:',empresaError);return{error:{message:'Erro ao criar perfil de empresa'}};}return{error:null};}catch(error){console.error('Erro no processo de cadastro:',error);return{error};}};const signOut=async()=>{await supabase.auth.signOut();};const value={session,user,loading,signIn,signUp,signOut};return/*#__PURE__*/_jsx(AuthContext.Provider,{value:value,children:children});};export const useAuth=()=>{const context=useContext(AuthContext);if(context===undefined){throw new Error('useAuth deve ser usado dentro de um AuthProvider');}return context;};export default AuthContext;","map":{"version":3,"names":["React","createContext","useContext","useState","useEffect","supabase","jsx","_jsx","AuthContext","undefined","AuthProvider","_ref","children","session","setSession","user","setUser","loading","setLoading","auth","getSession","then","_ref2","_session$user","data","subscription","onAuthStateChange","_event","_session$user2","unsubscribe","signIn","email","password","error","signInWithPassword","signUp","username","adminPassword","ADMIN_PASSWORD","message","length","authData","authError","options","restricaoData","restricaoError","from","insert","dv_tipo_restricao","select","console","restricaoId","id","empresaError","dv_nome","dv_email","dv_senha","signOut","value","Provider","useAuth","context","Error"],"sources":["/root/m-software/drive-react/src/contexts/AuthContext.tsx"],"sourcesContent":["import React, { createContext, useContext, useState, useEffect, ReactNode } from 'react';\nimport { Session, User } from '@supabase/supabase-js';\nimport { supabase } from '../services/supabase';\n\ninterface AuthContextType {\n  session: Session | null;\n  user: User | null;\n  loading: boolean;\n  signIn: (email: string, password: string) => Promise<{ error: any }>;\n  signUp: (email: string, password: string, username: string, adminPassword: string) => Promise<{ error: any }>;\n  signOut: () => Promise<void>;\n}\n\nconst AuthContext = createContext<AuthContextType | undefined>(undefined);\n\ninterface AuthProviderProps {\n  children: ReactNode;\n}\n\nexport const AuthProvider: React.FC<AuthProviderProps> = ({ children }) => {\n  const [session, setSession] = useState<Session | null>(null);\n  const [user, setUser] = useState<User | null>(null);\n  const [loading, setLoading] = useState(true);\n\n  useEffect(() => {\n    // Obter sessão atual\n    supabase.auth.getSession().then(({ data: { session } }) => {\n      setSession(session);\n      setUser(session?.user ?? null);\n      setLoading(false);\n    });\n\n    // Configurar listener para mudanças na autenticação\n    const { data: { subscription } } = supabase.auth.onAuthStateChange((_event, session) => {\n      setSession(session);\n      setUser(session?.user ?? null);\n      setLoading(false);\n    });\n\n    return () => subscription.unsubscribe();\n  }, []);\n\n  const signIn = async (email: string, password: string) => {\n    try {\n      const { error } = await supabase.auth.signInWithPassword({ email, password });\n      return { error };\n    } catch (error) {\n      return { error };\n    }\n  };\n\n  const signUp = async (email: string, password: string, username: string, adminPassword: string) => {\n    // Verificar senha de administrador - usando uma senha fixa para demonstração\n    // Em produção, seria melhor usar variáveis de ambiente ou um sistema mais seguro\n    const ADMIN_PASSWORD = 'vale-sis-admin';\n    \n    if (adminPassword !== ADMIN_PASSWORD) {\n      return { error: { message: 'Senha de autorização incorreta!' } };\n    }\n    \n    // Validar email e senha\n    if (!email || !password || !username) {\n      return { error: { message: 'Email, senha e nome de usuário são obrigatórios' } };\n    }\n    \n    if (password.length < 6) {\n      return { error: { message: 'A senha deve ter pelo menos 6 caracteres' } };\n    }\n\n    try {\n      // 1. Registrar o usuário no sistema de autenticação do Supabase\n      const { data: authData, error: authError } = await supabase.auth.signUp({\n        email,\n        password,\n        options: {\n          data: { username }\n        }\n      });\n      \n      if (authError) {\n        return { error: authError };\n      }\n      \n      // 2. Inserir um registro na tabela dv_restricao_user (padrão como 'admin')\n      const { data: restricaoData, error: restricaoError } = await supabase\n        .from('dv_restricao_user')\n        .insert([{ dv_tipo_restricao: 'admin' }])\n        .select();\n      \n      if (restricaoError) {\n        console.error('Erro ao criar registro de restrição:', restricaoError);\n        return { error: { message: 'Erro ao criar perfil de usuário' } };\n      }\n      \n      // 3. Inserir um registro na tabela dv_cad_empresas_drive\n      const restricaoId = restricaoData[0].id;\n      const { error: empresaError } = await supabase\n        .from('dv_cad_empresas_drive')\n        .insert([{\n          dv_nome: username,\n          dv_email: email,\n          dv_senha: password, // Nota: em produção, não armazenar senhas em texto simples\n          dv_tipo_restricao: restricaoId\n        }]);\n      \n      if (empresaError) {\n        console.error('Erro ao criar registro de empresa:', empresaError);\n        return { error: { message: 'Erro ao criar perfil de empresa' } };\n      }\n      \n      return { error: null };\n    } catch (error) {\n      console.error('Erro no processo de cadastro:', error);\n      return { error };\n    }\n  };\n\n  const signOut = async () => {\n    await supabase.auth.signOut();\n  };\n\n  const value = {\n    session,\n    user,\n    loading,\n    signIn,\n    signUp,\n    signOut\n  };\n\n  return <AuthContext.Provider value={value}>{children}</AuthContext.Provider>;\n};\n\nexport const useAuth = () => {\n  const context = useContext(AuthContext);\n  if (context === undefined) {\n    throw new Error('useAuth deve ser usado dentro de um AuthProvider');\n  }\n  return context;\n};\n\nexport default AuthContext;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}