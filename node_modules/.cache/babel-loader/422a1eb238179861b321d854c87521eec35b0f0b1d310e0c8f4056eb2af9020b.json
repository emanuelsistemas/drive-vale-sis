{"ast":null,"code":"import { supabase } from './supabase';\n\n/**\n * Serviço para gerenciar permissões de acesso a arquivos\n */\n\n// Tipos para tabela de permissões\n\n// CRUD para permissões de arquivo\nexport const filePermissionCrud = {\n  // Criar uma nova permissão\n  async create(data) {\n    try {\n      const {\n        data: result,\n        error\n      } = await supabase.from('file_permissions').insert([data]).select();\n      if (error) {\n        console.error('Erro ao criar permissão:', error);\n        throw error;\n      }\n      return result === null || result === void 0 ? void 0 : result[0];\n    } catch (error) {\n      console.error('Erro ao criar permissão:', error);\n      throw error;\n    }\n  },\n  // Obter todas as permissões de um arquivo\n  async getByFileId(fileId) {\n    try {\n      const {\n        data,\n        error\n      } = await supabase.from('file_permissions').select(`\n          *,\n          user:user_id(id, dv_nome, dv_email),\n          empresa:empresa_id(id, dv_nome)\n        `).eq('file_id', fileId);\n      if (error) {\n        console.error(`Erro ao buscar permissões do arquivo ${fileId}:`, error);\n        throw error;\n      }\n      return data;\n    } catch (error) {\n      console.error(`Erro ao buscar permissões do arquivo ${fileId}:`, error);\n      throw error;\n    }\n  },\n  // Obter permissões de um usuário\n  async getByUserId(userId) {\n    try {\n      const {\n        data,\n        error\n      } = await supabase.from('file_permissions').select(`\n          *,\n          file:file_id(*)\n        `).eq('user_id', userId);\n      if (error) {\n        console.error(`Erro ao buscar permissões do usuário ${userId}:`, error);\n        throw error;\n      }\n      return data;\n    } catch (error) {\n      console.error(`Erro ao buscar permissões do usuário ${userId}:`, error);\n      throw error;\n    }\n  },\n  // Obter permissões de uma empresa\n  async getByEmpresaId(empresaId) {\n    try {\n      const {\n        data,\n        error\n      } = await supabase.from('file_permissions').select(`\n          *,\n          file:file_id(*)\n        `).eq('empresa_id', empresaId);\n      if (error) {\n        console.error(`Erro ao buscar permissões da empresa ${empresaId}:`, error);\n        throw error;\n      }\n      return data;\n    } catch (error) {\n      console.error(`Erro ao buscar permissões da empresa ${empresaId}:`, error);\n      throw error;\n    }\n  },\n  // Atualizar uma permissão\n  async update(id, data) {\n    try {\n      const {\n        data: result,\n        error\n      } = await supabase.from('file_permissions').update(data).eq('id', id).select();\n      if (error) {\n        console.error(`Erro ao atualizar permissão ${id}:`, error);\n        throw error;\n      }\n      return result === null || result === void 0 ? void 0 : result[0];\n    } catch (error) {\n      console.error(`Erro ao atualizar permissão ${id}:`, error);\n      throw error;\n    }\n  },\n  // Excluir uma permissão\n  async delete(id) {\n    try {\n      const {\n        error\n      } = await supabase.from('file_permissions').delete().eq('id', id);\n      if (error) {\n        console.error(`Erro ao excluir permissão ${id}:`, error);\n        throw error;\n      }\n      return true;\n    } catch (error) {\n      console.error(`Erro ao excluir permissão ${id}:`, error);\n      throw error;\n    }\n  },\n  // Verificar se um usuário tem permissão para um arquivo\n  async checkUserPermission(fileId, userId, requiredPermission) {\n    try {\n      // Verificar se o arquivo é público\n      const {\n        data: fileData,\n        error: fileError\n      } = await supabase.from('files').select('is_public, user_id').eq('id', fileId).single();\n      if (fileError) {\n        throw fileError;\n      }\n\n      // Se o arquivo é público ou o usuário é o proprietário, permitir acesso\n      if (fileData.is_public && requiredPermission === 'read') {\n        return true;\n      }\n\n      // Se o usuário é o proprietário, permitir acesso total\n      if (fileData.user_id === userId) {\n        return true;\n      }\n\n      // Verificar permissões específicas\n      const {\n        data,\n        error\n      } = await supabase.from('file_permissions').select('permission_type').eq('file_id', fileId).eq('user_id', userId);\n      if (error) {\n        throw error;\n      }\n\n      // Se não há permissões, verificar permissões da empresa\n      if (!data || data.length === 0) {\n        // Obter a empresa do usuário\n        const {\n          data: userData,\n          error: userError\n        } = await supabase.from('dv_cad_empresas_drive').select('id').eq('id', userId).single();\n        if (userError) {\n          throw userError;\n        }\n\n        // Verificar permissões da empresa\n        const {\n          data: empresaPermissions,\n          error: empresaError\n        } = await supabase.from('file_permissions').select('permission_type').eq('file_id', fileId).eq('empresa_id', userData.id);\n        if (empresaError) {\n          throw empresaError;\n        }\n        if (!empresaPermissions || empresaPermissions.length === 0) {\n          return false;\n        }\n\n        // Verificar se a permissão da empresa é suficiente\n        return checkPermissionLevel(empresaPermissions[0].permission_type, requiredPermission);\n      }\n\n      // Verificar se a permissão do usuário é suficiente\n      return checkPermissionLevel(data[0].permission_type, requiredPermission);\n    } catch (error) {\n      console.error(`Erro ao verificar permissão do usuário ${userId} para o arquivo ${fileId}:`, error);\n      return false;\n    }\n  }\n};\n\n// Função auxiliar para verificar o nível de permissão\nfunction checkPermissionLevel(userPermission, requiredPermission) {\n  const permissionLevels = {\n    'read': 1,\n    'write': 2,\n    'admin': 3\n  };\n  return permissionLevels[userPermission] >= permissionLevels[requiredPermission];\n}\n\n// Funções auxiliares para compartilhamento de arquivos\nexport const shareFileWithUser = async (fileId, userId, permissionType, createdBy) => {\n  return filePermissionCrud.create({\n    file_id: fileId,\n    user_id: userId,\n    permission_type: permissionType,\n    created_by: createdBy\n  });\n};\nexport const shareFileWithEmpresa = async (fileId, empresaId, permissionType, createdBy) => {\n  return filePermissionCrud.create({\n    file_id: fileId,\n    empresa_id: empresaId,\n    permission_type: permissionType,\n    created_by: createdBy\n  });\n};\nexport const removeFileAccess = async permissionId => {\n  return filePermissionCrud.delete(permissionId);\n};\n\n// Função para criar tabela de permissões no Supabase\nexport const createPermissionsTable = async () => {\n  try {\n    // Verificar se a tabela já existe\n    const {\n      error: checkError\n    } = await supabase.rpc('exec', {\n      query: `SELECT to_regclass('public.file_permissions');`\n    });\n    if (checkError) {\n      console.error('Erro ao verificar tabela de permissões:', checkError);\n    }\n\n    // Criar a tabela file_permissions\n    const createTableQuery = `\n      CREATE TABLE IF NOT EXISTS file_permissions (\n        id BIGINT GENERATED ALWAYS AS IDENTITY PRIMARY KEY,\n        file_id BIGINT REFERENCES files(id) ON DELETE CASCADE,\n        user_id BIGINT REFERENCES dv_cad_empresas_drive(id),\n        empresa_id BIGINT REFERENCES dv_cad_empresas_drive(id),\n        permission_type TEXT CHECK (permission_type IN ('read', 'write', 'admin')) NOT NULL,\n        created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),\n        created_by BIGINT REFERENCES dv_cad_empresas_drive(id) NOT NULL,\n        CONSTRAINT check_target CHECK (\n          (user_id IS NULL AND empresa_id IS NOT NULL) OR\n          (user_id IS NOT NULL AND empresa_id IS NULL)\n        )\n      );\n    `;\n    const {\n      error: createError\n    } = await supabase.rpc('exec', {\n      query: createTableQuery\n    });\n    if (createError) {\n      console.error('Erro ao criar tabela de permissões:', createError);\n      throw createError;\n    }\n\n    // Criar índices para melhorar performance\n    const createIndexesQuery = `\n      CREATE INDEX IF NOT EXISTS idx_file_permissions_file_id ON file_permissions(file_id);\n      CREATE INDEX IF NOT EXISTS idx_file_permissions_user_id ON file_permissions(user_id);\n      CREATE INDEX IF NOT EXISTS idx_file_permissions_empresa_id ON file_permissions(empresa_id);\n    `;\n    const {\n      error: indexError\n    } = await supabase.rpc('exec', {\n      query: createIndexesQuery\n    });\n    if (indexError) {\n      console.error('Erro ao criar índices para tabela de permissões:', indexError);\n    }\n    return {\n      success: true\n    };\n  } catch (error) {\n    console.error('Erro ao criar tabela de permissões:', error);\n    return {\n      success: false,\n      error\n    };\n  }\n};","map":{"version":3,"names":["supabase","filePermissionCrud","create","data","result","error","from","insert","select","console","getByFileId","fileId","eq","getByUserId","userId","getByEmpresaId","empresaId","update","id","delete","checkUserPermission","requiredPermission","fileData","fileError","single","is_public","user_id","length","userData","userError","empresaPermissions","empresaError","checkPermissionLevel","permission_type","userPermission","permissionLevels","shareFileWithUser","permissionType","createdBy","file_id","created_by","shareFileWithEmpresa","empresa_id","removeFileAccess","permissionId","createPermissionsTable","checkError","rpc","query","createTableQuery","createError","createIndexesQuery","indexError","success"],"sources":["/root/m-software/drive-react/src/services/permissionService.ts"],"sourcesContent":["import { supabase } from './supabase';\n\n/**\n * Serviço para gerenciar permissões de acesso a arquivos\n */\n\n// Tipos para tabela de permissões\nexport interface FilePermission {\n  id?: number;\n  file_id: number;\n  user_id?: number;\n  empresa_id?: number;\n  permission_type: 'read' | 'write' | 'admin';\n  created_at?: string;\n  created_by: number;\n}\n\n// CRUD para permissões de arquivo\nexport const filePermissionCrud = {\n  // Criar uma nova permissão\n  async create(data: FilePermission) {\n    try {\n      const { data: result, error } = await supabase\n        .from('file_permissions')\n        .insert([data])\n        .select();\n      \n      if (error) {\n        console.error('Erro ao criar permissão:', error);\n        throw error;\n      }\n      \n      return result?.[0];\n    } catch (error) {\n      console.error('Erro ao criar permissão:', error);\n      throw error;\n    }\n  },\n  \n  // Obter todas as permissões de um arquivo\n  async getByFileId(fileId: number) {\n    try {\n      const { data, error } = await supabase\n        .from('file_permissions')\n        .select(`\n          *,\n          user:user_id(id, dv_nome, dv_email),\n          empresa:empresa_id(id, dv_nome)\n        `)\n        .eq('file_id', fileId);\n      \n      if (error) {\n        console.error(`Erro ao buscar permissões do arquivo ${fileId}:`, error);\n        throw error;\n      }\n      \n      return data;\n    } catch (error) {\n      console.error(`Erro ao buscar permissões do arquivo ${fileId}:`, error);\n      throw error;\n    }\n  },\n  \n  // Obter permissões de um usuário\n  async getByUserId(userId: number) {\n    try {\n      const { data, error } = await supabase\n        .from('file_permissions')\n        .select(`\n          *,\n          file:file_id(*)\n        `)\n        .eq('user_id', userId);\n      \n      if (error) {\n        console.error(`Erro ao buscar permissões do usuário ${userId}:`, error);\n        throw error;\n      }\n      \n      return data;\n    } catch (error) {\n      console.error(`Erro ao buscar permissões do usuário ${userId}:`, error);\n      throw error;\n    }\n  },\n  \n  // Obter permissões de uma empresa\n  async getByEmpresaId(empresaId: number) {\n    try {\n      const { data, error } = await supabase\n        .from('file_permissions')\n        .select(`\n          *,\n          file:file_id(*)\n        `)\n        .eq('empresa_id', empresaId);\n      \n      if (error) {\n        console.error(`Erro ao buscar permissões da empresa ${empresaId}:`, error);\n        throw error;\n      }\n      \n      return data;\n    } catch (error) {\n      console.error(`Erro ao buscar permissões da empresa ${empresaId}:`, error);\n      throw error;\n    }\n  },\n  \n  // Atualizar uma permissão\n  async update(id: number, data: Partial<FilePermission>) {\n    try {\n      const { data: result, error } = await supabase\n        .from('file_permissions')\n        .update(data)\n        .eq('id', id)\n        .select();\n      \n      if (error) {\n        console.error(`Erro ao atualizar permissão ${id}:`, error);\n        throw error;\n      }\n      \n      return result?.[0];\n    } catch (error) {\n      console.error(`Erro ao atualizar permissão ${id}:`, error);\n      throw error;\n    }\n  },\n  \n  // Excluir uma permissão\n  async delete(id: number) {\n    try {\n      const { error } = await supabase\n        .from('file_permissions')\n        .delete()\n        .eq('id', id);\n      \n      if (error) {\n        console.error(`Erro ao excluir permissão ${id}:`, error);\n        throw error;\n      }\n      \n      return true;\n    } catch (error) {\n      console.error(`Erro ao excluir permissão ${id}:`, error);\n      throw error;\n    }\n  },\n  \n  // Verificar se um usuário tem permissão para um arquivo\n  async checkUserPermission(fileId: number, userId: number, requiredPermission: 'read' | 'write' | 'admin') {\n    try {\n      // Verificar se o arquivo é público\n      const { data: fileData, error: fileError } = await supabase\n        .from('files')\n        .select('is_public, user_id')\n        .eq('id', fileId)\n        .single();\n      \n      if (fileError) {\n        throw fileError;\n      }\n      \n      // Se o arquivo é público ou o usuário é o proprietário, permitir acesso\n      if (fileData.is_public && requiredPermission === 'read') {\n        return true;\n      }\n      \n      // Se o usuário é o proprietário, permitir acesso total\n      if (fileData.user_id === userId) {\n        return true;\n      }\n      \n      // Verificar permissões específicas\n      const { data, error } = await supabase\n        .from('file_permissions')\n        .select('permission_type')\n        .eq('file_id', fileId)\n        .eq('user_id', userId);\n      \n      if (error) {\n        throw error;\n      }\n      \n      // Se não há permissões, verificar permissões da empresa\n      if (!data || data.length === 0) {\n        // Obter a empresa do usuário\n        const { data: userData, error: userError } = await supabase\n          .from('dv_cad_empresas_drive')\n          .select('id')\n          .eq('id', userId)\n          .single();\n        \n        if (userError) {\n          throw userError;\n        }\n        \n        // Verificar permissões da empresa\n        const { data: empresaPermissions, error: empresaError } = await supabase\n          .from('file_permissions')\n          .select('permission_type')\n          .eq('file_id', fileId)\n          .eq('empresa_id', userData.id);\n        \n        if (empresaError) {\n          throw empresaError;\n        }\n        \n        if (!empresaPermissions || empresaPermissions.length === 0) {\n          return false;\n        }\n        \n        // Verificar se a permissão da empresa é suficiente\n        return checkPermissionLevel(empresaPermissions[0].permission_type, requiredPermission);\n      }\n      \n      // Verificar se a permissão do usuário é suficiente\n      return checkPermissionLevel(data[0].permission_type, requiredPermission);\n    } catch (error) {\n      console.error(`Erro ao verificar permissão do usuário ${userId} para o arquivo ${fileId}:`, error);\n      return false;\n    }\n  }\n};\n\n// Função auxiliar para verificar o nível de permissão\nfunction checkPermissionLevel(userPermission: string, requiredPermission: string): boolean {\n  const permissionLevels = {\n    'read': 1,\n    'write': 2,\n    'admin': 3\n  };\n  \n  return permissionLevels[userPermission as keyof typeof permissionLevels] >= \n         permissionLevels[requiredPermission as keyof typeof permissionLevels];\n}\n\n// Funções auxiliares para compartilhamento de arquivos\nexport const shareFileWithUser = async (fileId: number, userId: number, permissionType: 'read' | 'write' | 'admin', createdBy: number) => {\n  return filePermissionCrud.create({\n    file_id: fileId,\n    user_id: userId,\n    permission_type: permissionType,\n    created_by: createdBy\n  });\n};\n\nexport const shareFileWithEmpresa = async (fileId: number, empresaId: number, permissionType: 'read' | 'write' | 'admin', createdBy: number) => {\n  return filePermissionCrud.create({\n    file_id: fileId,\n    empresa_id: empresaId,\n    permission_type: permissionType,\n    created_by: createdBy\n  });\n};\n\nexport const removeFileAccess = async (permissionId: number) => {\n  return filePermissionCrud.delete(permissionId);\n};\n\n// Função para criar tabela de permissões no Supabase\nexport const createPermissionsTable = async () => {\n  try {\n    // Verificar se a tabela já existe\n    const { error: checkError } = await supabase.rpc('exec', { \n      query: `SELECT to_regclass('public.file_permissions');` \n    });\n    \n    if (checkError) {\n      console.error('Erro ao verificar tabela de permissões:', checkError);\n    }\n    \n    // Criar a tabela file_permissions\n    const createTableQuery = `\n      CREATE TABLE IF NOT EXISTS file_permissions (\n        id BIGINT GENERATED ALWAYS AS IDENTITY PRIMARY KEY,\n        file_id BIGINT REFERENCES files(id) ON DELETE CASCADE,\n        user_id BIGINT REFERENCES dv_cad_empresas_drive(id),\n        empresa_id BIGINT REFERENCES dv_cad_empresas_drive(id),\n        permission_type TEXT CHECK (permission_type IN ('read', 'write', 'admin')) NOT NULL,\n        created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),\n        created_by BIGINT REFERENCES dv_cad_empresas_drive(id) NOT NULL,\n        CONSTRAINT check_target CHECK (\n          (user_id IS NULL AND empresa_id IS NOT NULL) OR\n          (user_id IS NOT NULL AND empresa_id IS NULL)\n        )\n      );\n    `;\n    \n    const { error: createError } = await supabase.rpc('exec', { \n      query: createTableQuery \n    });\n    \n    if (createError) {\n      console.error('Erro ao criar tabela de permissões:', createError);\n      throw createError;\n    }\n    \n    // Criar índices para melhorar performance\n    const createIndexesQuery = `\n      CREATE INDEX IF NOT EXISTS idx_file_permissions_file_id ON file_permissions(file_id);\n      CREATE INDEX IF NOT EXISTS idx_file_permissions_user_id ON file_permissions(user_id);\n      CREATE INDEX IF NOT EXISTS idx_file_permissions_empresa_id ON file_permissions(empresa_id);\n    `;\n    \n    const { error: indexError } = await supabase.rpc('exec', { \n      query: createIndexesQuery \n    });\n    \n    if (indexError) {\n      console.error('Erro ao criar índices para tabela de permissões:', indexError);\n    }\n    \n    return { success: true };\n  } catch (error) {\n    console.error('Erro ao criar tabela de permissões:', error);\n    return { success: false, error };\n  }\n};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}