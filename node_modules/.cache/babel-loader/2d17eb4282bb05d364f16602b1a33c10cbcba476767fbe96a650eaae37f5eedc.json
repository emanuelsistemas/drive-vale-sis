{"ast":null,"code":"import { supabase } from './supabase';\nimport { createPermissionsTable } from './permissionService';\nimport { createCategoryTables } from './categoryService';\n\n/**\n * Função para criar as tabelas necessárias no Supabase caso não existam\n */\nexport const createRequiredTables = async () => {\n  try {\n    // Verificar se a tabela dv_restricao_user existe\n    const {\n      data: restricaoExists,\n      error: restricaoCheckError\n    } = await supabase.from('dv_restricao_user').select('id').limit(1);\n\n    // Se ocorrer um erro, provavelmente a tabela não existe\n    if (restricaoCheckError) {\n      console.log('Criando tabela dv_restricao_user...');\n\n      // Criar a tabela dv_restricao_user\n      const createRestricaoTableQuery = `\n        CREATE TABLE IF NOT EXISTS dv_restricao_user (\n          id BIGINT GENERATED ALWAYS AS IDENTITY PRIMARY KEY,\n          dv_tipo_restricao TEXT CHECK (dv_tipo_restricao IN ('admin', 'user')) DEFAULT 'admin',\n          usuario_id BIGINT\n        );\n      `;\n      const {\n        error: createRestricaoError\n      } = await supabase.rpc('exec', {\n        query: createRestricaoTableQuery\n      });\n      if (createRestricaoError) {\n        console.error('Erro ao criar tabela dv_restricao_user:', createRestricaoError);\n      } else {\n        console.log('Tabela dv_restricao_user criada com sucesso!');\n      }\n    }\n\n    // Verificar se a tabela dv_cad_empresas_drive existe\n    const {\n      data: empresasExists,\n      error: empresasCheckError\n    } = await supabase.from('dv_cad_empresas_drive').select('id').limit(1);\n\n    // Se ocorrer um erro, provavelmente a tabela não existe\n    if (empresasCheckError) {\n      console.log('Criando tabela dv_cad_empresas_drive...');\n\n      // Criar a tabela dv_cad_empresas_drive\n      const createEmpresasTableQuery = `\n        CREATE TABLE IF NOT EXISTS dv_cad_empresas_drive (\n          id BIGINT GENERATED ALWAYS AS IDENTITY PRIMARY KEY,\n          dv_nome TEXT,\n          dv_email TEXT,\n          dv_senha TEXT,\n          dv_tipo_restricao BIGINT REFERENCES dv_restricao_user(id)\n        );\n      `;\n      const {\n        error: createEmpresasError\n      } = await supabase.rpc('exec', {\n        query: createEmpresasTableQuery\n      });\n      if (createEmpresasError) {\n        console.error('Erro ao criar tabela dv_cad_empresas_drive:', createEmpresasError);\n      } else {\n        console.log('Tabela dv_cad_empresas_drive criada com sucesso!');\n      }\n    }\n\n    // Verificar se a coluna usuario_id existe na tabela dv_restricao_user\n    try {\n      const {\n        error: columnCheckError\n      } = await supabase.rpc('exec', {\n        query: `SELECT usuario_id FROM dv_restricao_user LIMIT 1;`\n      });\n\n      // Se ocorrer um erro, provavelmente a coluna não existe\n      if (columnCheckError) {\n        console.log('Adicionando coluna usuario_id à tabela dv_restricao_user...');\n\n        // Adicionar a coluna usuario_id à tabela dv_restricao_user\n        const addColumnQuery = `\n          ALTER TABLE dv_restricao_user\n          ADD COLUMN IF NOT EXISTS usuario_id BIGINT REFERENCES dv_cad_empresas_drive(id);\n        `;\n        const {\n          error: addColumnError\n        } = await supabase.rpc('exec', {\n          query: addColumnQuery\n        });\n        if (addColumnError) {\n          console.error('Erro ao adicionar coluna usuario_id:', addColumnError);\n        } else {\n          console.log('Coluna usuario_id adicionada com sucesso!');\n        }\n      }\n    } catch (error) {\n      console.error('Erro ao verificar coluna usuario_id:', error);\n    }\n\n    // Criar tabela de arquivos\n    try {\n      // Verificar se a tabela files existe\n      const {\n        error: filesCheckError\n      } = await supabase.rpc('exec', {\n        query: `SELECT to_regclass('public.files');`\n      });\n      if (filesCheckError) {\n        console.log('Criando tabela de arquivos...');\n        const createFilesTableQuery = `\n          CREATE TABLE IF NOT EXISTS files (\n            id BIGINT GENERATED ALWAYS AS IDENTITY PRIMARY KEY,\n            name TEXT NOT NULL,\n            size BIGINT NOT NULL,\n            type TEXT,\n            path TEXT NOT NULL,\n            user_id TEXT NOT NULL,\n            empresa_id BIGINT REFERENCES dv_cad_empresas_drive(id),\n            is_public BOOLEAN DEFAULT FALSE,\n            created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),\n            updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),\n            description TEXT,\n            tags TEXT[]\n          );\n          \n          CREATE INDEX IF NOT EXISTS idx_files_user_id ON files(user_id);\n          CREATE INDEX IF NOT EXISTS idx_files_empresa_id ON files(empresa_id);\n          CREATE INDEX IF NOT EXISTS idx_files_is_public ON files(is_public);\n        `;\n        const {\n          error: createFilesError\n        } = await supabase.rpc('exec', {\n          query: createFilesTableQuery\n        });\n        if (createFilesError) {\n          console.error('Erro ao criar tabela de arquivos:', createFilesError);\n        } else {\n          console.log('Tabela de arquivos criada com sucesso!');\n        }\n      }\n    } catch (error) {\n      console.error('Erro ao verificar/criar tabela de arquivos:', error);\n    }\n\n    // Criar tabela de permissões\n    try {\n      await createPermissionsTable();\n      console.log('Tabela de permissões verificada/criada com sucesso!');\n    } catch (error) {\n      console.error('Erro ao criar tabela de permissões:', error);\n    }\n\n    // Criar tabelas de categorias\n    try {\n      await createCategoryTables();\n      console.log('Tabelas de categorias verificadas/criadas com sucesso!');\n    } catch (error) {\n      console.error('Erro ao criar tabelas de categorias:', error);\n    }\n    return {\n      success: true\n    };\n  } catch (error) {\n    console.error('Erro ao criar tabelas:', error);\n    return {\n      success: false,\n      error\n    };\n  }\n};\nexport default createRequiredTables;","map":{"version":3,"names":["supabase","createPermissionsTable","createCategoryTables","createRequiredTables","data","restricaoExists","error","restricaoCheckError","from","select","limit","console","log","createRestricaoTableQuery","createRestricaoError","rpc","query","empresasExists","empresasCheckError","createEmpresasTableQuery","createEmpresasError","columnCheckError","addColumnQuery","addColumnError","filesCheckError","createFilesTableQuery","createFilesError","success"],"sources":["/root/m-software/drive-react/src/services/createTables.ts"],"sourcesContent":["import { supabase } from './supabase';\nimport { createPermissionsTable } from './permissionService';\nimport { createCategoryTables } from './categoryService';\n\n/**\n * Função para criar as tabelas necessárias no Supabase caso não existam\n */\nexport const createRequiredTables = async () => {\n  try {\n    // Verificar se a tabela dv_restricao_user existe\n    const { data: restricaoExists, error: restricaoCheckError } = await supabase\n      .from('dv_restricao_user')\n      .select('id')\n      .limit(1);\n    \n    // Se ocorrer um erro, provavelmente a tabela não existe\n    if (restricaoCheckError) {\n      console.log('Criando tabela dv_restricao_user...');\n      \n      // Criar a tabela dv_restricao_user\n      const createRestricaoTableQuery = `\n        CREATE TABLE IF NOT EXISTS dv_restricao_user (\n          id BIGINT GENERATED ALWAYS AS IDENTITY PRIMARY KEY,\n          dv_tipo_restricao TEXT CHECK (dv_tipo_restricao IN ('admin', 'user')) DEFAULT 'admin',\n          usuario_id BIGINT\n        );\n      `;\n      \n      const { error: createRestricaoError } = await supabase.rpc('exec', { \n        query: createRestricaoTableQuery \n      });\n      \n      if (createRestricaoError) {\n        console.error('Erro ao criar tabela dv_restricao_user:', createRestricaoError);\n      } else {\n        console.log('Tabela dv_restricao_user criada com sucesso!');\n      }\n    }\n    \n    // Verificar se a tabela dv_cad_empresas_drive existe\n    const { data: empresasExists, error: empresasCheckError } = await supabase\n      .from('dv_cad_empresas_drive')\n      .select('id')\n      .limit(1);\n    \n    // Se ocorrer um erro, provavelmente a tabela não existe\n    if (empresasCheckError) {\n      console.log('Criando tabela dv_cad_empresas_drive...');\n      \n      // Criar a tabela dv_cad_empresas_drive\n      const createEmpresasTableQuery = `\n        CREATE TABLE IF NOT EXISTS dv_cad_empresas_drive (\n          id BIGINT GENERATED ALWAYS AS IDENTITY PRIMARY KEY,\n          dv_nome TEXT,\n          dv_email TEXT,\n          dv_senha TEXT,\n          dv_tipo_restricao BIGINT REFERENCES dv_restricao_user(id)\n        );\n      `;\n      \n      const { error: createEmpresasError } = await supabase.rpc('exec', { \n        query: createEmpresasTableQuery \n      });\n      \n      if (createEmpresasError) {\n        console.error('Erro ao criar tabela dv_cad_empresas_drive:', createEmpresasError);\n      } else {\n        console.log('Tabela dv_cad_empresas_drive criada com sucesso!');\n      }\n    }\n    \n    // Verificar se a coluna usuario_id existe na tabela dv_restricao_user\n    try {\n      const { error: columnCheckError } = await supabase.rpc('exec', { \n        query: `SELECT usuario_id FROM dv_restricao_user LIMIT 1;` \n      });\n      \n      // Se ocorrer um erro, provavelmente a coluna não existe\n      if (columnCheckError) {\n        console.log('Adicionando coluna usuario_id à tabela dv_restricao_user...');\n        \n        // Adicionar a coluna usuario_id à tabela dv_restricao_user\n        const addColumnQuery = `\n          ALTER TABLE dv_restricao_user\n          ADD COLUMN IF NOT EXISTS usuario_id BIGINT REFERENCES dv_cad_empresas_drive(id);\n        `;\n        \n        const { error: addColumnError } = await supabase.rpc('exec', { \n          query: addColumnQuery \n        });\n        \n        if (addColumnError) {\n          console.error('Erro ao adicionar coluna usuario_id:', addColumnError);\n        } else {\n          console.log('Coluna usuario_id adicionada com sucesso!');\n        }\n      }\n    } catch (error) {\n      console.error('Erro ao verificar coluna usuario_id:', error);\n    }\n    \n    // Criar tabela de arquivos\n    try {\n      // Verificar se a tabela files existe\n      const { error: filesCheckError } = await supabase.rpc('exec', { \n        query: `SELECT to_regclass('public.files');` \n      });\n      \n      if (filesCheckError) {\n        console.log('Criando tabela de arquivos...');\n        \n        const createFilesTableQuery = `\n          CREATE TABLE IF NOT EXISTS files (\n            id BIGINT GENERATED ALWAYS AS IDENTITY PRIMARY KEY,\n            name TEXT NOT NULL,\n            size BIGINT NOT NULL,\n            type TEXT,\n            path TEXT NOT NULL,\n            user_id TEXT NOT NULL,\n            empresa_id BIGINT REFERENCES dv_cad_empresas_drive(id),\n            is_public BOOLEAN DEFAULT FALSE,\n            created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),\n            updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),\n            description TEXT,\n            tags TEXT[]\n          );\n          \n          CREATE INDEX IF NOT EXISTS idx_files_user_id ON files(user_id);\n          CREATE INDEX IF NOT EXISTS idx_files_empresa_id ON files(empresa_id);\n          CREATE INDEX IF NOT EXISTS idx_files_is_public ON files(is_public);\n        `;\n        \n        const { error: createFilesError } = await supabase.rpc('exec', { \n          query: createFilesTableQuery \n        });\n        \n        if (createFilesError) {\n          console.error('Erro ao criar tabela de arquivos:', createFilesError);\n        } else {\n          console.log('Tabela de arquivos criada com sucesso!');\n        }\n      }\n    } catch (error) {\n      console.error('Erro ao verificar/criar tabela de arquivos:', error);\n    }\n    \n    // Criar tabela de permissões\n    try {\n      await createPermissionsTable();\n      console.log('Tabela de permissões verificada/criada com sucesso!');\n    } catch (error) {\n      console.error('Erro ao criar tabela de permissões:', error);\n    }\n    \n    // Criar tabelas de categorias\n    try {\n      await createCategoryTables();\n      console.log('Tabelas de categorias verificadas/criadas com sucesso!');\n    } catch (error) {\n      console.error('Erro ao criar tabelas de categorias:', error);\n    }\n    \n    return { success: true };\n  } catch (error) {\n    console.error('Erro ao criar tabelas:', error);\n    return { success: false, error };\n  }\n};\n\nexport default createRequiredTables;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}