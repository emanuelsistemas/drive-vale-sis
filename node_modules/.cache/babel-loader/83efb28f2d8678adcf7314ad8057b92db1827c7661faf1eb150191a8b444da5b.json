{"ast":null,"code":"var _jsxFileName = \"/root/m-software/drive-react/src/contexts/AuthContext.tsx\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { createContext, useContext, useState, useEffect } from 'react';\nimport { useSupabase } from './SupabaseContext';\nimport { UserService } from '../services/UserService';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst AuthContext = /*#__PURE__*/createContext(undefined);\nexport const AuthProvider = ({\n  children\n}) => {\n  _s();\n  const {\n    supabase\n  } = useSupabase();\n  const [session, setSession] = useState(null);\n  const [user, setUser] = useState(null);\n  const [userData, setUserData] = useState(null);\n  const [isAdmin, setIsAdmin] = useState(false);\n  const [loading, setLoading] = useState(true);\n\n  // Inicializar o serviço de usuários\n  const userService = new UserService(supabase);\n\n  // Carregar dados do usuário\n  const loadUserData = async currentSession => {\n    if (!currentSession) {\n      setUserData(null);\n      setIsAdmin(false);\n      return;\n    }\n    try {\n      // Verificar se é admin\n      const adminStatus = await userService.isAdmin();\n      setIsAdmin(adminStatus);\n\n      // Carregar dados do usuário\n      const currentUserData = await userService.getCurrentUser();\n      setUserData(currentUserData);\n    } catch (error) {\n      console.error('Erro ao carregar dados do usuário:', error);\n    }\n  };\n  useEffect(() => {\n    // Obter sessão atual\n    supabase.auth.getSession().then(({\n      data: {\n        session\n      }\n    }) => {\n      var _session$user;\n      setSession(session);\n      setUser((_session$user = session === null || session === void 0 ? void 0 : session.user) !== null && _session$user !== void 0 ? _session$user : null);\n      loadUserData(session);\n      setLoading(false);\n    });\n\n    // Configurar listener para mudanças na autenticação\n    const {\n      data: {\n        subscription\n      }\n    } = supabase.auth.onAuthStateChange((event, session) => {\n      var _session$user2;\n      setSession(session);\n      setUser((_session$user2 = session === null || session === void 0 ? void 0 : session.user) !== null && _session$user2 !== void 0 ? _session$user2 : null);\n      loadUserData(session);\n      setLoading(false);\n    });\n    return () => subscription.unsubscribe();\n  }, []);\n  const signIn = async (email, password) => {\n    try {\n      const {\n        error\n      } = await supabase.auth.signInWithPassword({\n        email,\n        password\n      });\n      return {\n        error\n      };\n    } catch (error) {\n      return {\n        error: error\n      };\n    }\n  };\n  const signUp = async (email, password, nome, adminPassword, empresa) => {\n    // Verificar se todos os campos foram preenchidos\n    if (!email || !password || !nome || !adminPassword) {\n      return {\n        error: {\n          message: 'Todos os campos obrigatórios devem ser preenchidos'\n        }\n      };\n    }\n\n    // Verificar senha de autorização\n    if (adminPassword !== 'admin123') {\n      // Valor fixo da variável REACT_APP_ADMIN_PASSWORD\n      return {\n        error: {\n          message: 'Senha de autorização inválida'\n        }\n      };\n    }\n\n    // Validar formato de email\n    const emailRegex = /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/;\n    if (!emailRegex.test(email)) {\n      return {\n        error: {\n          message: 'Formato de email inválido'\n        }\n      };\n    }\n\n    // Validar tamanho da senha\n    if (password.length < 6) {\n      return {\n        error: {\n          message: 'A senha deve ter pelo menos 6 caracteres'\n        }\n      };\n    }\n\n    // Validar nome de usuário\n    if (nome.length < 3) {\n      return {\n        error: {\n          message: 'O nome deve ter pelo menos 3 caracteres'\n        }\n      };\n    }\n    try {\n      // Criar usuário usando o serviço de usuários\n      const userParams = {\n        email,\n        password,\n        nome,\n        empresa\n      };\n      await userService.createUser(userParams);\n      return {\n        error: null\n      };\n    } catch (error) {\n      console.error('Erro no processo de cadastro:', error);\n      return {\n        error: {\n          message: error.message || 'Erro ao criar usuário'\n        }\n      };\n    }\n  };\n  const signOut = async () => {\n    await supabase.auth.signOut();\n  };\n  const value = {\n    session,\n    user,\n    userData,\n    isAdmin,\n    loading,\n    signIn,\n    signUp,\n    signOut\n  };\n  return /*#__PURE__*/_jsxDEV(AuthContext.Provider, {\n    value: value,\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 145,\n    columnNumber: 10\n  }, this);\n};\n_s(AuthProvider, \"FiSCK8ADVs6xbRi4xOCWhP/ZTsI=\", false, function () {\n  return [useSupabase];\n});\n_c = AuthProvider;\nexport const useAuth = () => {\n  _s2();\n  const context = useContext(AuthContext);\n  if (context === undefined) {\n    throw new Error('useAuth deve ser usado dentro de um AuthProvider');\n  }\n  return context;\n};\n_s2(useAuth, \"b9L3QQ+jgeyIrH0NfHrJ8nn7VMU=\");\nexport default AuthContext;\nvar _c;\n$RefreshReg$(_c, \"AuthProvider\");","map":{"version":3,"names":["React","createContext","useContext","useState","useEffect","useSupabase","UserService","jsxDEV","_jsxDEV","AuthContext","undefined","AuthProvider","children","_s","supabase","session","setSession","user","setUser","userData","setUserData","isAdmin","setIsAdmin","loading","setLoading","userService","loadUserData","currentSession","adminStatus","currentUserData","getCurrentUser","error","console","auth","getSession","then","data","_session$user","subscription","onAuthStateChange","event","_session$user2","unsubscribe","signIn","email","password","signInWithPassword","signUp","nome","adminPassword","empresa","message","emailRegex","test","length","userParams","createUser","signOut","value","Provider","fileName","_jsxFileName","lineNumber","columnNumber","_c","useAuth","_s2","context","Error","$RefreshReg$"],"sources":["/root/m-software/drive-react/src/contexts/AuthContext.tsx"],"sourcesContent":["import React, { createContext, useContext, useState, useEffect, ReactNode } from 'react';\nimport { Session, User, AuthError } from '@supabase/supabase-js';\nimport { useSupabase } from './SupabaseContext';\nimport { UserService, CadEmpUser, CreateUserParams } from '../services/UserService';\n\ninterface AuthContextType {\n  session: Session | null;\n  user: User | null;\n  userData: CadEmpUser | null;\n  isAdmin: boolean;\n  loading: boolean;\n  signIn: (email: string, password: string) => Promise<{ error: any }>;\n  signUp: (email: string, password: string, nome: string, adminPassword: string, empresa?: string) => Promise<{ error: any }>;\n  signOut: () => Promise<void>;\n}\n\nconst AuthContext = createContext<AuthContextType | undefined>(undefined);\n\ninterface AuthProviderProps {\n  children: ReactNode;\n}\n\nexport const AuthProvider: React.FC<AuthProviderProps> = ({ children }) => {\n  const { supabase } = useSupabase();\n  const [session, setSession] = useState<Session | null>(null);\n  const [user, setUser] = useState<User | null>(null);\n  const [userData, setUserData] = useState<CadEmpUser | null>(null);\n  const [isAdmin, setIsAdmin] = useState(false);\n  const [loading, setLoading] = useState(true);\n  \n  // Inicializar o serviço de usuários\n  const userService = new UserService(supabase);\n\n  // Carregar dados do usuário\n  const loadUserData = async (currentSession: Session | null) => {\n    if (!currentSession) {\n      setUserData(null);\n      setIsAdmin(false);\n      return;\n    }\n\n    try {\n      // Verificar se é admin\n      const adminStatus = await userService.isAdmin();\n      setIsAdmin(adminStatus);\n      \n      // Carregar dados do usuário\n      const currentUserData = await userService.getCurrentUser();\n      setUserData(currentUserData);\n    } catch (error) {\n      console.error('Erro ao carregar dados do usuário:', error);\n    }\n  };\n\n  useEffect(() => {\n    // Obter sessão atual\n    supabase.auth.getSession().then(({ data: { session } }: { data: { session: Session | null } }) => {\n      setSession(session);\n      setUser(session?.user ?? null);\n      loadUserData(session);\n      setLoading(false);\n    });\n\n    // Configurar listener para mudanças na autenticação\n    const { data: { subscription } } = supabase.auth.onAuthStateChange(\n      (event: string, session: Session | null) => {\n        setSession(session);\n        setUser(session?.user ?? null);\n        loadUserData(session);\n        setLoading(false);\n      }\n    );\n\n    return () => subscription.unsubscribe();\n  }, []);\n\n  const signIn = async (email: string, password: string) => {\n    try {\n      const { error } = await supabase.auth.signInWithPassword({ email, password });\n      return { error };\n    } catch (error) {\n      return { error: error as AuthError };\n    }\n  };\n\n  const signUp = async (email: string, password: string, nome: string, adminPassword: string, empresa?: string) => {\n    // Verificar se todos os campos foram preenchidos\n    if (!email || !password || !nome || !adminPassword) {\n      return { error: { message: 'Todos os campos obrigatórios devem ser preenchidos' } };\n    }\n    \n    // Verificar senha de autorização\n    if (adminPassword !== 'admin123') { // Valor fixo da variável REACT_APP_ADMIN_PASSWORD\n      return { error: { message: 'Senha de autorização inválida' } };\n    }\n    \n    // Validar formato de email\n    const emailRegex = /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/;\n    if (!emailRegex.test(email)) {\n      return { error: { message: 'Formato de email inválido' } };\n    }\n    \n    // Validar tamanho da senha\n    if (password.length < 6) {\n      return { error: { message: 'A senha deve ter pelo menos 6 caracteres' } };\n    }\n    \n    // Validar nome de usuário\n    if (nome.length < 3) {\n      return { error: { message: 'O nome deve ter pelo menos 3 caracteres' } };\n    }\n\n    try {\n      // Criar usuário usando o serviço de usuários\n      const userParams: CreateUserParams = {\n        email,\n        password,\n        nome,\n        empresa\n      };\n      \n      await userService.createUser(userParams);\n      return { error: null };\n    } catch (error: any) {\n      console.error('Erro no processo de cadastro:', error);\n      return { error: { message: error.message || 'Erro ao criar usuário' } };\n    }\n  };\n\n  const signOut = async () => {\n    await supabase.auth.signOut();\n  };\n\n  const value = {\n    session,\n    user,\n    userData,\n    isAdmin,\n    loading,\n    signIn,\n    signUp,\n    signOut\n  };\n\n  return <AuthContext.Provider value={value}>{children}</AuthContext.Provider>;\n};\n\nexport const useAuth = () => {\n  const context = useContext(AuthContext);\n  if (context === undefined) {\n    throw new Error('useAuth deve ser usado dentro de um AuthProvider');\n  }\n  return context;\n};\n\nexport default AuthContext;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}