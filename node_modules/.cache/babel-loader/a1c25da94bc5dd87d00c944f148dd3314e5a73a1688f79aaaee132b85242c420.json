{"ast":null,"code":"var _jsxFileName = \"/root/m-software/drive-react/src/components/PasswordInput/index.tsx\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport { Container, Input, ToggleButton, ErrorMessage } from './styles';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst PasswordInput = ({\n  id,\n  label,\n  value,\n  onChange,\n  required = false,\n  minLength,\n  error,\n  onBlur\n}) => {\n  _s();\n  const [showPassword, setShowPassword] = useState(false);\n  const togglePasswordVisibility = () => {\n    setShowPassword(!showPassword);\n  };\n  return /*#__PURE__*/_jsxDEV(Container, {\n    children: [/*#__PURE__*/_jsxDEV(\"label\", {\n      htmlFor: id,\n      children: label\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 33,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"password-container\",\n      children: [/*#__PURE__*/_jsxDEV(Input, {\n        type: showPassword ? 'text' : 'password',\n        id: id,\n        value: value,\n        onChange: onChange,\n        required: required,\n        minLength: minLength,\n        onBlur: onBlur,\n        className: error ? 'invalid' : ''\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 35,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(ToggleButton, {\n        type: \"button\",\n        onClick: togglePasswordVisibility,\n        className: showPassword ? 'visible' : '',\n        children: /*#__PURE__*/_jsxDEV(\"i\", {\n          className: `fas ${showPassword ? 'fa-eye-slash' : 'fa-eye'}`\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 50,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 45,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 34,\n      columnNumber: 7\n    }, this), error && /*#__PURE__*/_jsxDEV(ErrorMessage, {\n      children: error\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 17\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 32,\n    columnNumber: 5\n  }, this);\n};\n_s(PasswordInput, \"daguiRHWMFkqPgCh/ppD7CF5VuQ=\");\n_c = PasswordInput;\nexport default PasswordInput;\nvar _c;\n$RefreshReg$(_c, \"PasswordInput\");","map":{"version":3,"names":["React","useState","Container","Input","ToggleButton","ErrorMessage","jsxDEV","_jsxDEV","PasswordInput","id","label","value","onChange","required","minLength","error","onBlur","_s","showPassword","setShowPassword","togglePasswordVisibility","children","htmlFor","fileName","_jsxFileName","lineNumber","columnNumber","className","type","onClick","_c","$RefreshReg$"],"sources":["/root/m-software/drive-react/src/components/PasswordInput/index.tsx"],"sourcesContent":["import React, { useState } from 'react';\nimport { Container, Input, ToggleButton, ErrorMessage } from './styles';\n\ninterface PasswordInputProps {\n  id: string;\n  label: string;\n  value: string;\n  onChange: (e: React.ChangeEvent<HTMLInputElement>) => void;\n  required?: boolean;\n  minLength?: number;\n  error?: string;\n  onBlur?: (e: React.FocusEvent<HTMLInputElement>) => void;\n}\n\nconst PasswordInput: React.FC<PasswordInputProps> = ({\n  id,\n  label,\n  value,\n  onChange,\n  required = false,\n  minLength,\n  error,\n  onBlur\n}) => {\n  const [showPassword, setShowPassword] = useState(false);\n\n  const togglePasswordVisibility = () => {\n    setShowPassword(!showPassword);\n  };\n\n  return (\n    <Container>\n      <label htmlFor={id}>{label}</label>\n      <div className=\"password-container\">\n        <Input\n          type={showPassword ? 'text' : 'password'}\n          id={id}\n          value={value}\n          onChange={onChange}\n          required={required}\n          minLength={minLength}\n          onBlur={onBlur}\n          className={error ? 'invalid' : ''}\n        />\n        <ToggleButton\n          type=\"button\"\n          onClick={togglePasswordVisibility}\n          className={showPassword ? 'visible' : ''}\n        >\n          <i className={`fas ${showPassword ? 'fa-eye-slash' : 'fa-eye'}`}></i>\n        </ToggleButton>\n      </div>\n      {error && <ErrorMessage>{error}</ErrorMessage>}\n    </Container>\n  );\n};\n\nexport default PasswordInput;\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,QAAQ,OAAO;AACvC,SAASC,SAAS,EAAEC,KAAK,EAAEC,YAAY,EAAEC,YAAY,QAAQ,UAAU;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAaxE,MAAMC,aAA2C,GAAGA,CAAC;EACnDC,EAAE;EACFC,KAAK;EACLC,KAAK;EACLC,QAAQ;EACRC,QAAQ,GAAG,KAAK;EAChBC,SAAS;EACTC,KAAK;EACLC;AACF,CAAC,KAAK;EAAAC,EAAA;EACJ,MAAM,CAACC,YAAY,EAAEC,eAAe,CAAC,GAAGlB,QAAQ,CAAC,KAAK,CAAC;EAEvD,MAAMmB,wBAAwB,GAAGA,CAAA,KAAM;IACrCD,eAAe,CAAC,CAACD,YAAY,CAAC;EAChC,CAAC;EAED,oBACEX,OAAA,CAACL,SAAS;IAAAmB,QAAA,gBACRd,OAAA;MAAOe,OAAO,EAAEb,EAAG;MAAAY,QAAA,EAAEX;IAAK;MAAAa,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAQ,CAAC,eACnCnB,OAAA;MAAKoB,SAAS,EAAC,oBAAoB;MAAAN,QAAA,gBACjCd,OAAA,CAACJ,KAAK;QACJyB,IAAI,EAAEV,YAAY,GAAG,MAAM,GAAG,UAAW;QACzCT,EAAE,EAAEA,EAAG;QACPE,KAAK,EAAEA,KAAM;QACbC,QAAQ,EAAEA,QAAS;QACnBC,QAAQ,EAAEA,QAAS;QACnBC,SAAS,EAAEA,SAAU;QACrBE,MAAM,EAAEA,MAAO;QACfW,SAAS,EAAEZ,KAAK,GAAG,SAAS,GAAG;MAAG;QAAAQ,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACnC,CAAC,eACFnB,OAAA,CAACH,YAAY;QACXwB,IAAI,EAAC,QAAQ;QACbC,OAAO,EAAET,wBAAyB;QAClCO,SAAS,EAAET,YAAY,GAAG,SAAS,GAAG,EAAG;QAAAG,QAAA,eAEzCd,OAAA;UAAGoB,SAAS,EAAE,OAAOT,YAAY,GAAG,cAAc,GAAG,QAAQ;QAAG;UAAAK,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAI;MAAC;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACzD,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACZ,CAAC,EACLX,KAAK,iBAAIR,OAAA,CAACF,YAAY;MAAAgB,QAAA,EAAEN;IAAK;MAAAQ,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAe,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACrC,CAAC;AAEhB,CAAC;AAACT,EAAA,CAzCIT,aAA2C;AAAAsB,EAAA,GAA3CtB,aAA2C;AA2CjD,eAAeA,aAAa;AAAC,IAAAsB,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}