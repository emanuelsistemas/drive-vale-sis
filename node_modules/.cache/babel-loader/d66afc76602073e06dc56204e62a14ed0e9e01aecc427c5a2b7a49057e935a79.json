{"ast":null,"code":"// Interfaces para os tipos de dados\n\n/**\n * Serviço para gerenciar usuários e perfis de acesso\n */\nexport class UserService {\n  constructor(supabaseClient) {\n    this.supabase = void 0;\n    this.supabase = supabaseClient;\n  }\n\n  /**\n   * Verifica se o usuário atual é administrador\n   */\n  async isAdmin() {\n    try {\n      const {\n        data: user\n      } = await this.supabase.auth.getUser();\n      if (!user || !user.user) {\n        return false;\n      }\n      const {\n        data,\n        error\n      } = await this.supabase.rpc('is_admin', {\n        user_id: user.user.id\n      });\n      if (error) {\n        console.error('Erro ao verificar se é admin:', error);\n        return false;\n      }\n      return data || false;\n    } catch (error) {\n      console.error('Erro ao verificar se é admin:', error);\n      return false;\n    }\n  }\n\n  /**\n   * Obtém todos os perfis de acesso\n   */\n  async getPerfis() {\n    const {\n      data,\n      error\n    } = await this.supabase.from('perfil_acesso').select('*').order('tipo');\n    if (error) {\n      console.error('Erro ao obter perfis:', error);\n      throw error;\n    }\n    return data || [];\n  }\n\n  /**\n   * Obtém todos os usuários com seus perfis\n   */\n  async getUsers() {\n    const {\n      data,\n      error\n    } = await this.supabase.from('cad_emp_user').select(`\n        *,\n        perfil:perfil_id (\n          id,\n          tipo,\n          descricao\n        )\n      `).order('nome');\n    if (error) {\n      console.error('Erro ao obter usuários:', error);\n      throw error;\n    }\n    return data || [];\n  }\n\n  /**\n   * Obtém um usuário pelo ID\n   */\n  async getUserById(id) {\n    const {\n      data,\n      error\n    } = await this.supabase.from('cad_emp_user').select(`\n        *,\n        perfil:perfil_id (\n          id,\n          tipo,\n          descricao\n        )\n      `).eq('id', id).single();\n    if (error) {\n      console.error('Erro ao obter usuário:', error);\n      throw error;\n    }\n    return data;\n  }\n\n  /**\n   * Obtém o usuário atual\n   */\n  async getCurrentUser() {\n    try {\n      const {\n        data: authData\n      } = await this.supabase.auth.getUser();\n      if (!authData || !authData.user) {\n        return null;\n      }\n      const {\n        data,\n        error\n      } = await this.supabase.from('cad_emp_user').select(`\n          *,\n          perfil:perfil_id (\n            id,\n            tipo,\n            descricao\n          )\n        `).eq('auth_id', authData.user.id).single();\n      if (error) {\n        console.error('Erro ao obter usuário atual:', error);\n        return null;\n      }\n      return data;\n    } catch (error) {\n      console.error('Erro ao obter usuário atual:', error);\n      return null;\n    }\n  }\n\n  /**\n   * Cria um novo usuário\n   */\n  async createUser(params) {\n    try {\n      // 0. Verificar se já existe um usuário com o mesmo email\n      const {\n        data: existingUsers,\n        error: checkError\n      } = await this.supabase.from('cad_emp_user').select('id').eq('email', params.email).limit(1);\n      if (checkError) {\n        console.error('Erro ao verificar email duplicado:', checkError);\n        throw checkError;\n      }\n      if (existingUsers && existingUsers.length > 0) {\n        throw new Error('Já existe um usuário cadastrado com este email.');\n      }\n\n      // 1. Criar usuário na autenticação\n      const {\n        data: authData,\n        error: authError\n      } = await this.supabase.auth.admin.createUser({\n        email: params.email,\n        password: params.password,\n        email_confirm: true\n      });\n      if (authError) {\n        console.error('Erro ao criar usuário na autenticação:', authError);\n        throw authError;\n      }\n\n      // 2. Verificar se é o primeiro usuário (será admin) ou se já existem outros usuários\n      let perfilId = params.perfil_id;\n      if (!perfilId) {\n        // Contar quantos usuários existem no sistema\n        const {\n          count,\n          error: countError\n        } = await this.supabase.from('cad_emp_user').select('*', {\n          count: 'exact',\n          head: true\n        });\n        if (countError) {\n          console.error('Erro ao contar usuários:', countError);\n          throw countError;\n        }\n\n        // Se não existir nenhum usuário, este será o primeiro e será admin\n        if (count === 0) {\n          const {\n            data: perfisAdmin,\n            error: perfilAdminError\n          } = await this.supabase.from('perfil_acesso').select('id').eq('tipo', 'admin').limit(1);\n          if (perfilAdminError) {\n            console.error('Erro ao obter perfil admin:', perfilAdminError);\n            throw perfilAdminError;\n          }\n          if (perfisAdmin && perfisAdmin.length > 0) {\n            perfilId = perfisAdmin[0].id;\n          }\n        } else {\n          // Se já existirem outros usuários, o novo será um usuário comum\n          const {\n            data: perfisUser,\n            error: perfilUserError\n          } = await this.supabase.from('perfil_acesso').select('id').eq('tipo', 'user').limit(1);\n          if (perfilUserError) {\n            console.error('Erro ao obter perfil user:', perfilUserError);\n            throw perfilUserError;\n          }\n          if (perfisUser && perfisUser.length > 0) {\n            perfilId = perfisUser[0].id;\n          }\n        }\n      }\n\n      // 3. Criar usuário na tabela cad_emp_user\n      const {\n        data: userData,\n        error: userError\n      } = await this.supabase.from('cad_emp_user').insert([{\n        auth_id: authData.user.id,\n        nome: params.nome,\n        email: params.email,\n        telefone: params.telefone,\n        empresa: params.empresa,\n        cargo: params.cargo,\n        perfil_id: perfilId,\n        ativo: params.ativo !== undefined ? params.ativo : true\n      }]).select(`\n          *,\n          perfil:perfil_id (\n            id,\n            tipo,\n            descricao\n          )\n        `).single();\n      if (userError) {\n        console.error('Erro ao criar usuário na tabela cad_emp_user:', userError);\n        throw userError;\n      }\n      return userData;\n    } catch (error) {\n      console.error('Erro ao criar usuário:', error);\n      throw error;\n    }\n  }\n\n  /**\n   * Atualiza um usuário existente\n   */\n  async updateUser(id, params) {\n    try {\n      const {\n        data,\n        error\n      } = await this.supabase.from('cad_emp_user').update({\n        nome: params.nome,\n        telefone: params.telefone,\n        empresa: params.empresa,\n        cargo: params.cargo,\n        perfil_id: params.perfil_id,\n        ativo: params.ativo\n      }).eq('id', id).select(`\n          *,\n          perfil:perfil_id (\n            id,\n            tipo,\n            descricao\n          )\n        `).single();\n      if (error) {\n        console.error('Erro ao atualizar usuário:', error);\n        throw error;\n      }\n      return data;\n    } catch (error) {\n      console.error('Erro ao atualizar usuário:', error);\n      throw error;\n    }\n  }\n\n  /**\n   * Exclui um usuário\n   */\n  async deleteUser(id) {\n    try {\n      // 1. Obter o auth_id do usuário\n      const {\n        data: userData,\n        error: userError\n      } = await this.supabase.from('cad_emp_user').select('auth_id').eq('id', id).single();\n      if (userError) {\n        console.error('Erro ao obter auth_id do usuário:', userError);\n        throw userError;\n      }\n\n      // 2. Excluir o usuário da tabela cad_emp_user\n      const {\n        error: deleteError\n      } = await this.supabase.from('cad_emp_user').delete().eq('id', id);\n      if (deleteError) {\n        console.error('Erro ao excluir usuário da tabela cad_emp_user:', deleteError);\n        throw deleteError;\n      }\n\n      // 3. Excluir o usuário da autenticação\n      if (userData && userData.auth_id) {\n        const {\n          error: authError\n        } = await this.supabase.auth.admin.deleteUser(userData.auth_id);\n        if (authError) {\n          console.error('Erro ao excluir usuário da autenticação:', authError);\n          throw authError;\n        }\n      }\n    } catch (error) {\n      console.error('Erro ao excluir usuário:', error);\n      throw error;\n    }\n  }\n}","map":{"version":3,"names":["UserService","constructor","supabaseClient","supabase","isAdmin","data","user","auth","getUser","error","rpc","user_id","id","console","getPerfis","from","select","order","getUsers","getUserById","eq","single","getCurrentUser","authData","createUser","params","existingUsers","checkError","email","limit","length","Error","authError","admin","password","email_confirm","perfilId","perfil_id","count","countError","head","perfisAdmin","perfilAdminError","perfisUser","perfilUserError","userData","userError","insert","auth_id","nome","telefone","empresa","cargo","ativo","undefined","updateUser","update","deleteUser","deleteError","delete"],"sources":["/root/m-software/drive-react/src/services/UserService.ts"],"sourcesContent":["import { SupabaseClient } from '@supabase/supabase-js';\n\n// Interfaces para os tipos de dados\nexport interface PerfilAcesso {\n  id: string;\n  tipo: 'admin' | 'user';\n  descricao?: string;\n  created_at?: string;\n  updated_at?: string;\n}\n\nexport interface CadEmpUser {\n  id: string;\n  auth_id: string;\n  nome: string;\n  email: string;\n  telefone?: string;\n  empresa?: string;\n  cargo?: string;\n  perfil_id: string;\n  ativo: boolean;\n  created_at?: string;\n  updated_at?: string;\n  perfil?: PerfilAcesso;\n}\n\nexport interface CreateUserParams {\n  email: string;\n  password: string;\n  nome: string;\n  telefone?: string;\n  empresa?: string;\n  cargo?: string;\n  perfil_id?: string;\n  ativo?: boolean;\n}\n\nexport interface UpdateUserParams {\n  nome?: string;\n  telefone?: string;\n  empresa?: string;\n  cargo?: string;\n  perfil_id?: string;\n  ativo?: boolean;\n}\n\n/**\n * Serviço para gerenciar usuários e perfis de acesso\n */\nexport class UserService {\n  private supabase: SupabaseClient;\n\n  constructor(supabaseClient: SupabaseClient) {\n    this.supabase = supabaseClient;\n  }\n\n  /**\n   * Verifica se o usuário atual é administrador\n   */\n  async isAdmin(): Promise<boolean> {\n    try {\n      const { data: user } = await this.supabase.auth.getUser();\n      \n      if (!user || !user.user) {\n        return false;\n      }\n      \n      const { data, error } = await this.supabase.rpc('is_admin', {\n        user_id: user.user.id\n      });\n      \n      if (error) {\n        console.error('Erro ao verificar se é admin:', error);\n        return false;\n      }\n      \n      return data || false;\n    } catch (error) {\n      console.error('Erro ao verificar se é admin:', error);\n      return false;\n    }\n  }\n\n  /**\n   * Obtém todos os perfis de acesso\n   */\n  async getPerfis(): Promise<PerfilAcesso[]> {\n    const { data, error } = await this.supabase\n      .from('perfil_acesso')\n      .select('*')\n      .order('tipo');\n    \n    if (error) {\n      console.error('Erro ao obter perfis:', error);\n      throw error;\n    }\n    \n    return data || [];\n  }\n\n  /**\n   * Obtém todos os usuários com seus perfis\n   */\n  async getUsers(): Promise<CadEmpUser[]> {\n    const { data, error } = await this.supabase\n      .from('cad_emp_user')\n      .select(`\n        *,\n        perfil:perfil_id (\n          id,\n          tipo,\n          descricao\n        )\n      `)\n      .order('nome');\n    \n    if (error) {\n      console.error('Erro ao obter usuários:', error);\n      throw error;\n    }\n    \n    return data || [];\n  }\n\n  /**\n   * Obtém um usuário pelo ID\n   */\n  async getUserById(id: string): Promise<CadEmpUser | null> {\n    const { data, error } = await this.supabase\n      .from('cad_emp_user')\n      .select(`\n        *,\n        perfil:perfil_id (\n          id,\n          tipo,\n          descricao\n        )\n      `)\n      .eq('id', id)\n      .single();\n    \n    if (error) {\n      console.error('Erro ao obter usuário:', error);\n      throw error;\n    }\n    \n    return data;\n  }\n\n  /**\n   * Obtém o usuário atual\n   */\n  async getCurrentUser(): Promise<CadEmpUser | null> {\n    try {\n      const { data: authData } = await this.supabase.auth.getUser();\n      \n      if (!authData || !authData.user) {\n        return null;\n      }\n      \n      const { data, error } = await this.supabase\n        .from('cad_emp_user')\n        .select(`\n          *,\n          perfil:perfil_id (\n            id,\n            tipo,\n            descricao\n          )\n        `)\n        .eq('auth_id', authData.user.id)\n        .single();\n      \n      if (error) {\n        console.error('Erro ao obter usuário atual:', error);\n        return null;\n      }\n      \n      return data;\n    } catch (error) {\n      console.error('Erro ao obter usuário atual:', error);\n      return null;\n    }\n  }\n\n  /**\n   * Cria um novo usuário\n   */\n  async createUser(params: CreateUserParams): Promise<CadEmpUser | null> {\n    try {\n      // 0. Verificar se já existe um usuário com o mesmo email\n      const { data: existingUsers, error: checkError } = await this.supabase\n        .from('cad_emp_user')\n        .select('id')\n        .eq('email', params.email)\n        .limit(1);\n      \n      if (checkError) {\n        console.error('Erro ao verificar email duplicado:', checkError);\n        throw checkError;\n      }\n      \n      if (existingUsers && existingUsers.length > 0) {\n        throw new Error('Já existe um usuário cadastrado com este email.');\n      }\n      \n      // 1. Criar usuário na autenticação\n      const { data: authData, error: authError } = await this.supabase.auth.admin.createUser({\n        email: params.email,\n        password: params.password,\n        email_confirm: true\n      });\n      \n      if (authError) {\n        console.error('Erro ao criar usuário na autenticação:', authError);\n        throw authError;\n      }\n      \n      // 2. Verificar se é o primeiro usuário (será admin) ou se já existem outros usuários\n      let perfilId = params.perfil_id;\n      \n      if (!perfilId) {\n        // Contar quantos usuários existem no sistema\n        const { count, error: countError } = await this.supabase\n          .from('cad_emp_user')\n          .select('*', { count: 'exact', head: true });\n        \n        if (countError) {\n          console.error('Erro ao contar usuários:', countError);\n          throw countError;\n        }\n        \n        // Se não existir nenhum usuário, este será o primeiro e será admin\n        if (count === 0) {\n          const { data: perfisAdmin, error: perfilAdminError } = await this.supabase\n            .from('perfil_acesso')\n            .select('id')\n            .eq('tipo', 'admin')\n            .limit(1);\n          \n          if (perfilAdminError) {\n            console.error('Erro ao obter perfil admin:', perfilAdminError);\n            throw perfilAdminError;\n          }\n          \n          if (perfisAdmin && perfisAdmin.length > 0) {\n            perfilId = perfisAdmin[0].id;\n          }\n        } else {\n          // Se já existirem outros usuários, o novo será um usuário comum\n          const { data: perfisUser, error: perfilUserError } = await this.supabase\n            .from('perfil_acesso')\n            .select('id')\n            .eq('tipo', 'user')\n            .limit(1);\n          \n          if (perfilUserError) {\n            console.error('Erro ao obter perfil user:', perfilUserError);\n            throw perfilUserError;\n          }\n          \n          if (perfisUser && perfisUser.length > 0) {\n            perfilId = perfisUser[0].id;\n          }\n        }\n      }\n      \n      // 3. Criar usuário na tabela cad_emp_user\n      const { data: userData, error: userError } = await this.supabase\n        .from('cad_emp_user')\n        .insert([\n          {\n            auth_id: authData.user.id,\n            nome: params.nome,\n            email: params.email,\n            telefone: params.telefone,\n            empresa: params.empresa,\n            cargo: params.cargo,\n            perfil_id: perfilId,\n            ativo: params.ativo !== undefined ? params.ativo : true\n          }\n        ])\n        .select(`\n          *,\n          perfil:perfil_id (\n            id,\n            tipo,\n            descricao\n          )\n        `)\n        .single();\n      \n      if (userError) {\n        console.error('Erro ao criar usuário na tabela cad_emp_user:', userError);\n        throw userError;\n      }\n      \n      return userData;\n    } catch (error) {\n      console.error('Erro ao criar usuário:', error);\n      throw error;\n    }\n  }\n\n  /**\n   * Atualiza um usuário existente\n   */\n  async updateUser(id: string, params: UpdateUserParams): Promise<CadEmpUser | null> {\n    try {\n      const { data, error } = await this.supabase\n        .from('cad_emp_user')\n        .update({\n          nome: params.nome,\n          telefone: params.telefone,\n          empresa: params.empresa,\n          cargo: params.cargo,\n          perfil_id: params.perfil_id,\n          ativo: params.ativo\n        })\n        .eq('id', id)\n        .select(`\n          *,\n          perfil:perfil_id (\n            id,\n            tipo,\n            descricao\n          )\n        `)\n        .single();\n      \n      if (error) {\n        console.error('Erro ao atualizar usuário:', error);\n        throw error;\n      }\n      \n      return data;\n    } catch (error) {\n      console.error('Erro ao atualizar usuário:', error);\n      throw error;\n    }\n  }\n\n  /**\n   * Exclui um usuário\n   */\n  async deleteUser(id: string): Promise<void> {\n    try {\n      // 1. Obter o auth_id do usuário\n      const { data: userData, error: userError } = await this.supabase\n        .from('cad_emp_user')\n        .select('auth_id')\n        .eq('id', id)\n        .single();\n      \n      if (userError) {\n        console.error('Erro ao obter auth_id do usuário:', userError);\n        throw userError;\n      }\n      \n      // 2. Excluir o usuário da tabela cad_emp_user\n      const { error: deleteError } = await this.supabase\n        .from('cad_emp_user')\n        .delete()\n        .eq('id', id);\n      \n      if (deleteError) {\n        console.error('Erro ao excluir usuário da tabela cad_emp_user:', deleteError);\n        throw deleteError;\n      }\n      \n      // 3. Excluir o usuário da autenticação\n      if (userData && userData.auth_id) {\n        const { error: authError } = await this.supabase.auth.admin.deleteUser(\n          userData.auth_id\n        );\n        \n        if (authError) {\n          console.error('Erro ao excluir usuário da autenticação:', authError);\n          throw authError;\n        }\n      }\n    } catch (error) {\n      console.error('Erro ao excluir usuário:', error);\n      throw error;\n    }\n  }\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}