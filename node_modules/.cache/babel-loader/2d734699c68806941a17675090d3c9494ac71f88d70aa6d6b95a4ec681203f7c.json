{"ast":null,"code":"import { supabase } from './supabase';\n\n/**\n * Serviço para operações CRUD nas tabelas do Supabase\n */\n\n// Tipos para as tabelas\n\n// CRUD para dv_restricao_user\nexport const restricaoUserCrud = {\n  // Create\n  async create(data) {\n    const {\n      data: result,\n      error\n    } = await supabase.from('dv_restricao_user').insert([data]).select();\n    if (error) {\n      console.error('Erro ao criar restrição de usuário:', error);\n      throw error;\n    }\n    return result === null || result === void 0 ? void 0 : result[0];\n  },\n  // Read\n  async getAll() {\n    const {\n      data,\n      error\n    } = await supabase.from('dv_restricao_user').select('*');\n    if (error) {\n      console.error('Erro ao buscar restrições de usuário:', error);\n      throw error;\n    }\n    return data;\n  },\n  async getById(id) {\n    const {\n      data,\n      error\n    } = await supabase.from('dv_restricao_user').select('*').eq('id', id).single();\n    if (error) {\n      console.error(`Erro ao buscar restrição de usuário com ID ${id}:`, error);\n      throw error;\n    }\n    return data;\n  },\n  async getByUsuarioId(usuarioId) {\n    const {\n      data,\n      error\n    } = await supabase.from('dv_restricao_user').select('*').eq('usuario_id', usuarioId);\n    if (error) {\n      console.error(`Erro ao buscar restrição de usuário com usuario_id ${usuarioId}:`, error);\n      throw error;\n    }\n    return data;\n  },\n  // Update\n  async update(id, data) {\n    const {\n      data: result,\n      error\n    } = await supabase.from('dv_restricao_user').update(data).eq('id', id).select();\n    if (error) {\n      console.error(`Erro ao atualizar restrição de usuário com ID ${id}:`, error);\n      throw error;\n    }\n    return result === null || result === void 0 ? void 0 : result[0];\n  },\n  // Delete\n  async delete(id) {\n    const {\n      error\n    } = await supabase.from('dv_restricao_user').delete().eq('id', id);\n    if (error) {\n      console.error(`Erro ao excluir restrição de usuário com ID ${id}:`, error);\n      throw error;\n    }\n    return true;\n  }\n};\n\n// CRUD para dv_cad_empresas_drive\nexport const empresaDriveCrud = {\n  // Create\n  async create(data) {\n    const {\n      data: result,\n      error\n    } = await supabase.from('dv_cad_empresas_drive').insert([data]).select();\n    if (error) {\n      console.error('Erro ao criar empresa:', error);\n      throw error;\n    }\n    return result === null || result === void 0 ? void 0 : result[0];\n  },\n  // Read\n  async getAll() {\n    const {\n      data,\n      error\n    } = await supabase.from('dv_cad_empresas_drive').select('*');\n    if (error) {\n      console.error('Erro ao buscar empresas:', error);\n      throw error;\n    }\n    return data;\n  },\n  async getById(id) {\n    const {\n      data,\n      error\n    } = await supabase.from('dv_cad_empresas_drive').select('*').eq('id', id).single();\n    if (error) {\n      console.error(`Erro ao buscar empresa com ID ${id}:`, error);\n      throw error;\n    }\n    return data;\n  },\n  async getByEmail(email) {\n    const {\n      data,\n      error\n    } = await supabase.from('dv_cad_empresas_drive').select('*').eq('dv_email', email).single();\n    if (error && error.code !== 'PGRST116') {\n      // PGRST116 é o código para \"nenhum resultado encontrado\"\n      console.error(`Erro ao buscar empresa com email ${email}:`, error);\n      throw error;\n    }\n    return data;\n  },\n  // Update\n  async update(id, data) {\n    const {\n      data: result,\n      error\n    } = await supabase.from('dv_cad_empresas_drive').update(data).eq('id', id).select();\n    if (error) {\n      console.error(`Erro ao atualizar empresa com ID ${id}:`, error);\n      throw error;\n    }\n    return result === null || result === void 0 ? void 0 : result[0];\n  },\n  // Delete\n  async delete(id) {\n    const {\n      error\n    } = await supabase.from('dv_cad_empresas_drive').delete().eq('id', id);\n    if (error) {\n      console.error(`Erro ao excluir empresa com ID ${id}:`, error);\n      throw error;\n    }\n    return true;\n  },\n  // Consultas avançadas\n  async getWithRestrictions() {\n    const {\n      data,\n      error\n    } = await supabase.from('dv_cad_empresas_drive').select(`\n        *,\n        restricao:dv_tipo_restricao(*)\n      `);\n    if (error) {\n      console.error('Erro ao buscar empresas com restrições:', error);\n      throw error;\n    }\n    return data;\n  }\n};\n\n// Função para criar um usuário completo (empresa + restrição)\nexport const createCompleteUser = async (nome, email, senha, tipoRestricao = 'admin') => {\n  try {\n    // 1. Criar restrição\n    const restricao = await restricaoUserCrud.create({\n      dv_tipo_restricao: tipoRestricao\n    });\n    if (!restricao || !restricao.id) {\n      throw new Error('Falha ao criar restrição de usuário');\n    }\n\n    // 2. Criar empresa\n    const empresa = await empresaDriveCrud.create({\n      dv_nome: nome,\n      dv_email: email,\n      dv_senha: senha,\n      dv_tipo_restricao: restricao.id\n    });\n    if (!empresa || !empresa.id) {\n      // Remover a restrição criada para não deixar lixo no banco\n      await restricaoUserCrud.delete(restricao.id);\n      throw new Error('Falha ao criar empresa');\n    }\n\n    // 3. Atualizar a restrição com o ID da empresa\n    await restricaoUserCrud.update(restricao.id, {\n      usuario_id: empresa.id\n    });\n    return {\n      empresa,\n      restricao: {\n        ...restricao,\n        usuario_id: empresa.id\n      }\n    };\n  } catch (error) {\n    console.error('Erro ao criar usuário completo:', error);\n    throw error;\n  }\n};\n\n// Função para buscar um usuário completo por email\nexport const getCompleteUserByEmail = async email => {\n  try {\n    // 1. Buscar empresa pelo email\n    const empresa = await empresaDriveCrud.getByEmail(email);\n    if (!empresa) {\n      return null;\n    }\n\n    // 2. Buscar restrição pelo ID da empresa\n    const restricoes = await restricaoUserCrud.getByUsuarioId(empresa.id);\n    return {\n      empresa,\n      restricao: (restricoes === null || restricoes === void 0 ? void 0 : restricoes[0]) || null\n    };\n  } catch (error) {\n    console.error('Erro ao buscar usuário completo:', error);\n    throw error;\n  }\n};","map":{"version":3,"names":["supabase","restricaoUserCrud","create","data","result","error","from","insert","select","console","getAll","getById","id","eq","single","getByUsuarioId","usuarioId","update","delete","empresaDriveCrud","getByEmail","email","code","getWithRestrictions","createCompleteUser","nome","senha","tipoRestricao","restricao","dv_tipo_restricao","Error","empresa","dv_nome","dv_email","dv_senha","usuario_id","getCompleteUserByEmail","restricoes"],"sources":["/root/m-software/drive-react/src/services/crudService.ts"],"sourcesContent":["import { supabase } from './supabase';\n\n/**\n * Serviço para operações CRUD nas tabelas do Supabase\n */\n\n// Tipos para as tabelas\nexport interface RestricaoUser {\n  id?: number;\n  dv_tipo_restricao: 'admin' | 'user';\n  usuario_id?: number;\n}\n\nexport interface EmpresaDrive {\n  id?: number;\n  dv_nome: string;\n  dv_email: string;\n  dv_senha: string;\n  dv_tipo_restricao: number;\n}\n\n// CRUD para dv_restricao_user\nexport const restricaoUserCrud = {\n  // Create\n  async create(data: RestricaoUser) {\n    const { data: result, error } = await supabase\n      .from('dv_restricao_user')\n      .insert([data])\n      .select();\n    \n    if (error) {\n      console.error('Erro ao criar restrição de usuário:', error);\n      throw error;\n    }\n    \n    return result?.[0];\n  },\n  \n  // Read\n  async getAll() {\n    const { data, error } = await supabase\n      .from('dv_restricao_user')\n      .select('*');\n    \n    if (error) {\n      console.error('Erro ao buscar restrições de usuário:', error);\n      throw error;\n    }\n    \n    return data;\n  },\n  \n  async getById(id: number) {\n    const { data, error } = await supabase\n      .from('dv_restricao_user')\n      .select('*')\n      .eq('id', id)\n      .single();\n    \n    if (error) {\n      console.error(`Erro ao buscar restrição de usuário com ID ${id}:`, error);\n      throw error;\n    }\n    \n    return data;\n  },\n  \n  async getByUsuarioId(usuarioId: number) {\n    const { data, error } = await supabase\n      .from('dv_restricao_user')\n      .select('*')\n      .eq('usuario_id', usuarioId);\n    \n    if (error) {\n      console.error(`Erro ao buscar restrição de usuário com usuario_id ${usuarioId}:`, error);\n      throw error;\n    }\n    \n    return data;\n  },\n  \n  // Update\n  async update(id: number, data: Partial<RestricaoUser>) {\n    const { data: result, error } = await supabase\n      .from('dv_restricao_user')\n      .update(data)\n      .eq('id', id)\n      .select();\n    \n    if (error) {\n      console.error(`Erro ao atualizar restrição de usuário com ID ${id}:`, error);\n      throw error;\n    }\n    \n    return result?.[0];\n  },\n  \n  // Delete\n  async delete(id: number) {\n    const { error } = await supabase\n      .from('dv_restricao_user')\n      .delete()\n      .eq('id', id);\n    \n    if (error) {\n      console.error(`Erro ao excluir restrição de usuário com ID ${id}:`, error);\n      throw error;\n    }\n    \n    return true;\n  }\n};\n\n// CRUD para dv_cad_empresas_drive\nexport const empresaDriveCrud = {\n  // Create\n  async create(data: EmpresaDrive) {\n    const { data: result, error } = await supabase\n      .from('dv_cad_empresas_drive')\n      .insert([data])\n      .select();\n    \n    if (error) {\n      console.error('Erro ao criar empresa:', error);\n      throw error;\n    }\n    \n    return result?.[0];\n  },\n  \n  // Read\n  async getAll() {\n    const { data, error } = await supabase\n      .from('dv_cad_empresas_drive')\n      .select('*');\n    \n    if (error) {\n      console.error('Erro ao buscar empresas:', error);\n      throw error;\n    }\n    \n    return data;\n  },\n  \n  async getById(id: number) {\n    const { data, error } = await supabase\n      .from('dv_cad_empresas_drive')\n      .select('*')\n      .eq('id', id)\n      .single();\n    \n    if (error) {\n      console.error(`Erro ao buscar empresa com ID ${id}:`, error);\n      throw error;\n    }\n    \n    return data;\n  },\n  \n  async getByEmail(email: string) {\n    const { data, error } = await supabase\n      .from('dv_cad_empresas_drive')\n      .select('*')\n      .eq('dv_email', email)\n      .single();\n    \n    if (error && error.code !== 'PGRST116') { // PGRST116 é o código para \"nenhum resultado encontrado\"\n      console.error(`Erro ao buscar empresa com email ${email}:`, error);\n      throw error;\n    }\n    \n    return data;\n  },\n  \n  // Update\n  async update(id: number, data: Partial<EmpresaDrive>) {\n    const { data: result, error } = await supabase\n      .from('dv_cad_empresas_drive')\n      .update(data)\n      .eq('id', id)\n      .select();\n    \n    if (error) {\n      console.error(`Erro ao atualizar empresa com ID ${id}:`, error);\n      throw error;\n    }\n    \n    return result?.[0];\n  },\n  \n  // Delete\n  async delete(id: number) {\n    const { error } = await supabase\n      .from('dv_cad_empresas_drive')\n      .delete()\n      .eq('id', id);\n    \n    if (error) {\n      console.error(`Erro ao excluir empresa com ID ${id}:`, error);\n      throw error;\n    }\n    \n    return true;\n  },\n  \n  // Consultas avançadas\n  async getWithRestrictions() {\n    const { data, error } = await supabase\n      .from('dv_cad_empresas_drive')\n      .select(`\n        *,\n        restricao:dv_tipo_restricao(*)\n      `);\n    \n    if (error) {\n      console.error('Erro ao buscar empresas com restrições:', error);\n      throw error;\n    }\n    \n    return data;\n  }\n};\n\n// Função para criar um usuário completo (empresa + restrição)\nexport const createCompleteUser = async (\n  nome: string,\n  email: string,\n  senha: string,\n  tipoRestricao: 'admin' | 'user' = 'admin'\n) => {\n  try {\n    // 1. Criar restrição\n    const restricao = await restricaoUserCrud.create({\n      dv_tipo_restricao: tipoRestricao\n    });\n    \n    if (!restricao || !restricao.id) {\n      throw new Error('Falha ao criar restrição de usuário');\n    }\n    \n    // 2. Criar empresa\n    const empresa = await empresaDriveCrud.create({\n      dv_nome: nome,\n      dv_email: email,\n      dv_senha: senha,\n      dv_tipo_restricao: restricao.id\n    });\n    \n    if (!empresa || !empresa.id) {\n      // Remover a restrição criada para não deixar lixo no banco\n      await restricaoUserCrud.delete(restricao.id);\n      throw new Error('Falha ao criar empresa');\n    }\n    \n    // 3. Atualizar a restrição com o ID da empresa\n    await restricaoUserCrud.update(restricao.id, {\n      usuario_id: empresa.id\n    });\n    \n    return {\n      empresa,\n      restricao: {\n        ...restricao,\n        usuario_id: empresa.id\n      }\n    };\n  } catch (error) {\n    console.error('Erro ao criar usuário completo:', error);\n    throw error;\n  }\n};\n\n// Função para buscar um usuário completo por email\nexport const getCompleteUserByEmail = async (email: string) => {\n  try {\n    // 1. Buscar empresa pelo email\n    const empresa = await empresaDriveCrud.getByEmail(email);\n    \n    if (!empresa) {\n      return null;\n    }\n    \n    // 2. Buscar restrição pelo ID da empresa\n    const restricoes = await restricaoUserCrud.getByUsuarioId(empresa.id!);\n    \n    return {\n      empresa,\n      restricao: restricoes?.[0] || null\n    };\n  } catch (error) {\n    console.error('Erro ao buscar usuário completo:', error);\n    throw error;\n  }\n};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}